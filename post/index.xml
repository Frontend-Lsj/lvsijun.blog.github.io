<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Lvsj&#39;s blog</title>
    <link>https://lvsijun.gitee.io/post/</link>
    <description>Recent content in Posts on Lvsj&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 22 Nov 2022 17:11:35 +0800</lastBuildDate><atom:link href="https://lvsijun.gitee.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ES5的一些扩展</title>
      <link>https://lvsijun.gitee.io/post/03-es5%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95/</link>
      <pubDate>Tue, 22 Nov 2022 17:11:35 +0800</pubDate>
      
      <guid>https://lvsijun.gitee.io/post/03-es5%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95/</guid>
      <description>JSON 对象 1、js对象(数组) &amp;ndash;&amp;gt; json对象(数组)： JSON.stringify(obj/arr) 2、json对象(数组) &amp;ndash;&amp;gt; js对象(数组)： JSON.parse(json) 上面这两个方法是ES5中提供的。 我们要记住</description>
    </item>
    
    <item>
      <title>ES5中的严格模式</title>
      <link>https://lvsijun.gitee.io/post/02-es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 22 Nov 2022 17:11:35 +0800</pubDate>
      
      <guid>https://lvsijun.gitee.io/post/02-es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</guid>
      <description>ES 的几个重要版本 ES5 : 09 年发布。 ES6(ES2015) : 2015 年发布，也称为 ECMA2015。 ES7(ES2016) : 2016 年发布，也称为 ECMA2016 (变化不大)。 严格模式的理解 概念 理解：除了正常运行</description>
    </item>
    
    <item>
      <title>Es6的介绍和环境配置</title>
      <link>https://lvsijun.gitee.io/post/01-es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 22 Nov 2022 17:11:35 +0800</pubDate>
      
      <guid>https://lvsijun.gitee.io/post/01-es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>前言 ECMAScript 简介 ES 的全称是 ECMAScript，它是由 ECMA 国际标准化组织 制定的一套脚本语言的标准化规范。 详细来说，ES 是由 ECMA 的第 39 号技术专家委员会（</description>
    </item>
    
    <item>
      <title>let、const和块级作用域</title>
      <link>https://lvsijun.gitee.io/post/04-es6%E5%8F%98%E9%87%8F-letconst-%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Tue, 22 Nov 2022 17:11:35 +0800</pubDate>
      
      <guid>https://lvsijun.gitee.io/post/04-es6%E5%8F%98%E9%87%8F-letconst-%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>ES6 的变量声明 ES5 中，使用 var 定义全局变量（ var 是 variable 的简写）。 ES6 中，新增了 let 和 const 来定义变量： let：定义局部变量，替代 var。 const：定义常量（</description>
    </item>
    
    <item>
      <title>变量的解构赋值</title>
      <link>https://lvsijun.gitee.io/post/05-es6%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</link>
      <pubDate>Tue, 22 Nov 2022 17:11:35 +0800</pubDate>
      
      <guid>https://lvsijun.gitee.io/post/05-es6%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</guid>
      <description>解构赋值的概念 解构赋值：ES6 允许我们，按照一一对应的方式，从数组或者对象中提取值，再将提取出来的值赋值给变量。 解构：分解数据结构；赋值：给</description>
    </item>
    
  </channel>
</rss>
