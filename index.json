[{"categories":null,"content":"阿甘正传（“我妈妈经常说，生活就像巧克力，你永远不知道下一颗是什么口味。”）\r宝莲灯（动画，个人认为已经逼近迪士尼水准了）\r暴力街区 Banlieue 13 （跑酷鼻祖大卫贝尔主演）\r变相怪杰（金凯瑞的脸简直就像橡皮泥）\r不能说的秘密（曲子都是精品）\r初恋这件小事（这就是初恋的感觉）\r楚门的世界（“如果再不能见到你，祝你早安、午安、晚安”）\r当幸福来敲门（“不要让别人告诉你，你不能做什么！”）\r地道战（抗日人民的脑洞真的很大）\r夺宝奇兵系列（看敌人在耍大刀，无奈一枪放倒）\r放牛班的春天（天籁之音）\r钢铁侠 1 （个人认为漫威系列最佳）\r国王的演讲（带英国挺过二战的国王是个口吃，超长待机女王是他的长女）\r哈利波特 1 、2 （让我对魔法世界最有新鲜感的两部，后面就有点暗黑了）\r海上钢琴师（音乐很棒）\r好想告诉你（电影+动画）\r黑客帝国系列（见证了两个导演从兄弟变为姐弟在变为姐妹）\r横空出世（“你愿意隐姓埋名一辈子吗？”）\r虎胆龙威系列（英文名 Die hard 超级贴切，就喜欢布鲁斯威利斯被两头坑的无奈表情）\r歌舞青春 1 （歌挺好听的）\r环太平洋（音乐起！）\r回到未来系列（被致敬无数次的科幻经典）\r机器管家（一个想成为人类的机器人的人生）\r机器人总动员（瓦力超会卖萌）\r疾速追杀系列（“A fuxxing pencil!”）\r罗马假日(男女主颜值超高)\r玫瑰人生（ Edith Piaf 传记，喜欢她的歌可以看一看）\r怦然心动（两个人的视角来讲述一个青春故事）\r七磅（片名出自威尼斯商人，主角的还“债”历程，同时也是自我的救赎）\r情书（光良的童话 MV 里面两个人看的那个电影，治愈系）\r让子弹飞（申遗！）\r入殓师（没有令人不适的镜头，可以放心观看，治愈系）\r三傻大闹宝莱坞（人物冲突处理到极致）\r速度与激情 3 （可能我是个异类？）\r天使爱美丽（色彩、音乐都很棒，文艺片）\r天堂电影院（一段忘年之交）\r头文字 D （“永远不要有跟人斗的心，你要赢的是你自己。”）\r闻香识女人（这部电影的台词真叫一个绝！）\r我，机器人（威尔史密斯主演动作电影的入坑作，其他像黑衣人之类的也很棒）\r我是传奇 1 （有点丧尸版鲁滨逊漂流记的感觉）\r无间道（港版经典）\r西西里的美丽传说（又硬又难受，人言可畏）\r逍遥法外（又叫猫鼠游戏，小李子和汤姆汉克斯版）\r小鬼当家系列（脑洞超大，超搞笑）\r肖申克的救赎（经典不解释）\r窈窕奶爸（罗宾威廉姆斯演技、口技超一流）\r云图（一旦看懂了，就挺妙）\r战争之王（点子超多的军火商的传奇故事）\r这个杀手不太冷（反差萌）\r蜘蛛侠 1 （没看过漫画，比较喜欢老版电影）\r终结者 2 （👍）\r最后的武士（挺悲壮的故事）\r宫崎骏作品（我是有少女心？）：\r天空之城（入坑作，我一直感觉是映射侵华战争）\r龙猫（超可爱！）\r幽灵公主（又叫魔法少女，久石让作曲超美）\r魔女宅急便（我也想养一只黑猫）\r千与千寻（就挺奇幻的）\r哈尔的移动城堡（全程注意力在菜头上）\r周星驰主演的经典无厘头，和猫和老鼠一样，可以电视轮播偶尔看一眼：\r喜剧之王\r唐伯虎点秋香\r百变星君\r大话西游系列\r功夫\r国产凌凌漆\r熟悉 JavaScript ，ES6\r熟悉 web3 框架，etherjs 或 web3js\r熟悉前端相关框架，了解 nodejs 工作流\r了解 DOM 以及现代浏览器各种技术\r熟悉 webgl ，three.js 加分\r手写 HTML ，熟悉 CSS 编写，有一定审美\r主动学习能力\r[任职要求]\r大学相关专业本科或研究生毕业\r两年以上互联网 /web3 行业一线工作经验\r英文文档阅读能力\r熟悉 Linux ，熟悉开源，熟悉 git ，github ，pull request 工作流\r有分布式办公经验，有独立解决问题的能力\r有开源作品加分\r发送简历请附带 github 地址 ","date":"2022/12/16","objectID":"/archives/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E4%B8%80%E7%9C%8B%E7%9A%84%E7%94%B5%E5%BD%B1.html/:0:0","tags":null,"title":"一些值得一看的电影","uri":"/archives/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E4%B8%80%E7%9C%8B%E7%9A%84%E7%94%B5%E5%BD%B1.html/"},{"categories":null,"content":" 备注： async/await 的内容还有待完善。 ","date":"2022/11/22","objectID":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/:0:0","tags":null,"title":"async函数详解","uri":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"async/await （异步函数）概述 async/await 是在 ES7 中引入的新语法，可以更加方便地进行异步操作。 本质： Generator 的语法糖。 async 的返回值是 Promise 实例对象。 await 可以得到异步结果。 我们在普通的函数前面加上 async 关键字，就成了 async 函数。 ","date":"2022/11/22","objectID":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/:1:0","tags":null,"title":"async函数详解","uri":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"async/await 的基本用法 async 后面可以跟一个 Promise 实例对象。代码举例如下： const request1 = function() { const promise = new Promise(resolve =\u003e { request('https://www.baidu.com', function(response) { if (response.retCode == 200) { // 这里的 response 是接口1的返回结果 resolve('request1 success'+ response); } else { reject('接口请求失败'); } }); }); return promise; }; async function queryData() { const response = await request1(); }); return response; } queryData().then(data =\u003e { console.log(data); }); ","date":"2022/11/22","objectID":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/:2:0","tags":null,"title":"async函数详解","uri":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"基于 async/await 处理多次 Ajax 请求【重要】 实际开发中，现在有三个网络请求，请求2必须依赖请求1的结果，请求3必须依赖请求2的结果，如果按照往常的写法，会有三层回调，会陷入“回调地狱”。 这种场景其实就是接口的多层嵌套调用。之前学过 Promise，它可以把原本的多层嵌套调用改进为链式调用。 而今天要学习的 async/await ，可以把原本的“多层嵌套调用”改成类似于同步的写法，非常优雅。 代码举例： 暂略。 ","date":"2022/11/22","objectID":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/:3:0","tags":null,"title":"async函数详解","uri":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Promise、async…await、Generator的对比 我们在使用 Promise、async…await、Generator 的时候，返回的都是 Promise 的实例。 如果直接使用 Promise，则需要通过 then 来进行链式调用；如果使用 async…await、Generator，写起来更像同步的代码。 ","date":"2022/11/22","objectID":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/:3:1","tags":null,"title":"async函数详解","uri":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"参考链接 js async await 终极异步解决方案 理解 JavaScript 的 async/await ","date":"2022/11/22","objectID":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/:4:0","tags":null,"title":"async函数详解","uri":"/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/"},{"categories":["cat3"],"content":"description.","date":"2022/11/22","objectID":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/","tags":["tag1","tag21","tag32"],"title":"ES5的一些扩展","uri":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/"},{"categories":["cat3"],"content":"JSON 对象 1、js对象(数组) –\u003e json对象(数组)： JSON.stringify(obj/arr) 2、json对象(数组) –\u003e js对象(数组)： JSON.parse(json) 上面这两个方法是ES5中提供的。 我们要记住，我们通常说的“json字符串”，只有两种：json对象、json数组。 typeof json字符串的返回结果是string。 ","date":"2022/11/22","objectID":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/:1:0","tags":["tag1","tag21","tag32"],"title":"ES5的一些扩展","uri":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/"},{"categories":["cat3"],"content":"Object的扩展 ES5给Object扩展了一些静态方法，常用的有2个，我们接下来讲解。 ","date":"2022/11/22","objectID":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/:2:0","tags":["tag1","tag21","tag32"],"title":"ES5的一些扩展","uri":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/"},{"categories":["cat3"],"content":"方法一 Object.create(prototype, [descriptors]) 作用: 以指定对象为原型，创建新的对象。同时，第二个参数可以为为新的对象添加新的属性，并对此属性进行描述。 举例1：（没有第二个参数时） var obj1 = {username: 'smyhvae', age: 26}; var obj2 = {address:'shenzhen'}; obj2 = Object.create(obj1); console.log(obj2); 打印结果： 我们发现，obj1成为了obj2的原型。 举例2：（有第二个参数时） 第二个参数可以给新的对象添加新的属性。我们修改上面的代码，尝试给obj2添加新属性sex： var obj1 = {username: 'smyhvae', age: 26}; var obj2 = {address: 'shenzhen'}; obj2 = Object.create(obj1, { sex: {//给obj2添加新的属性`sex`。注意，这一行的冒号不要漏掉 value: '男', //通过value关键字设置sex的属性值 writable: false, configurable: true, enumerable: true } }); console.log(obj2); 上方代码中，我们通过第5行的sex给obj2设置了一个新的属性sex，但是要通过value来设置属性值（第6行）。 设置完属性值后，这个属性值默认是不可修改的，要通过writable来设置。总而言之，这几个关键字的解释如下： value：设置属性值。 writable：标识当前属性值是否可修改。如果不写的话，默认为false，不可修改。 configurable：标识当前属性是否可以被删除。默认为false，不可删除。 enumerable：标识当前属性是否能用 for in 枚举。 默认为false，不可。 ","date":"2022/11/22","objectID":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/:2:1","tags":["tag1","tag21","tag32"],"title":"ES5的一些扩展","uri":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/"},{"categories":["cat3"],"content":"方法二 这个方法有点难理解。 Object.defineProperties(object, descriptors) 作用：为指定对象定义扩展多个属性。 代码举例： var obj2 = { firstName : 'smyh', lastName : 'vae' }; Object.defineProperties(obj2, { fullName : { get : function () { return this.firstName + '-' + this.lastName }, set : function (data) { //监听扩展属性，当扩展属性发生变化的时候自动调用，自动调用后将变化的值作为实参注入到set函数 var names = data.split('-'); this.firstName = names[0]; this.lastName = names[1]; } } }); console.log(obj2.fullName); obj2.firstName = 'tim'; obj2.lastName = 'duncan'; console.log(obj2.fullName); obj2.fullName = 'kobe-bryant'; console.log(obj2.fullName); get ：用来获取当前属性值的回调函数 set ：修改当前属性值得触发的回调函数，并且实参即为修改后的值 存取器属性：setter,getter一个用来存值，一个用来取值。 ","date":"2022/11/22","objectID":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/:2:2","tags":["tag1","tag21","tag32"],"title":"ES5的一些扩展","uri":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/"},{"categories":["cat3"],"content":"Object的扩展（二） obj对象本身就自带了两个方法。格式如下： get 属性名(){} 用来得到当前属性值的回调函数 set 属性名(){} 用来监视当前属性值变化的回调函数 举例如下： var obj = { firstName : 'kobe', lastName : 'bryant', get fullName(){ return this.firstName + ' ' + this.lastName }, set fullName(data){ var names = data.split(' '); this.firstName = names[0]; this.lastName = names[1]; } }; console.log(obj.fullName); obj.fullName = 'curry stephen'; console.log(obj.fullName); ","date":"2022/11/22","objectID":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/:3:0","tags":["tag1","tag21","tag32"],"title":"ES5的一些扩展","uri":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/"},{"categories":["cat3"],"content":"数组的扩展 下面讲的这几个方法，都是给数组的实例用的。 下面提到的数组的这五个方法，更详细的内容，可以看《03-JavaScript基础/15-数组的常见方法.md》 方法1： Array.prototype.indexOf(value) 作用：获取 value 在数组中的第一个下标。 方法2： Array.prototype.lastIndexOf(value) 作用：获取 value 在数组中的最后一个下标。 方法3：遍历数组 Array.prototype.forEach(function(item, index){}) 方法4： Array.prototype.map(function(item, index){}) 作用：遍历数组返回一个新的数组，返回的是加工之后的新数组。 方法5： Array.prototype.filter(function(item, index){}) 作用：遍历过滤出一个新的子数组，返回条件为true的值。 ","date":"2022/11/22","objectID":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/:4:0","tags":["tag1","tag21","tag32"],"title":"ES5的一些扩展","uri":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/"},{"categories":["cat3"],"content":"函数function的扩展：bind() ES5中新增了bind()函数来改变this的指向。 Function.prototype.bind(obj) 作用：将函数内的this绑定为obj, 并将函数返回。 面试题: call()、apply()和bind()的区别： 都能改变this的指向 call()/apply()是立即调用函数 bind()：绑定完this后，不会立即调用当前函数，而是将函数返回，因此后面还需要再加()才能调用。 PS：bind()传参的方式和call()一样。 分析： 为什么ES5中要加入bind()方法来改变this的指向呢？因为bind()不会立即调用当前函数。 bind()通常使用在回调函数中，因为回调函数并不会立即调用。如果你希望在回调函数中改变this，不妨使用bind()。 ","date":"2022/11/22","objectID":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/:5:0","tags":["tag1","tag21","tag32"],"title":"ES5的一些扩展","uri":"/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/"},{"categories":["cat2"],"content":"ES 的几个重要版本 ES5 : 09 年发布。 ES6(ES2015) : 2015 年发布，也称为 ECMA2015。 ES7(ES2016) : 2016 年发布，也称为 ECMA2016 (变化不大)。 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:1:0","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"严格模式的理解 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:2:0","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"概念 理解：除了正常运行模式(混杂模式)，ES5 添加了第二种运行模式：“严格模式”（strict mode）。 顾名思义，这种模式使得 Javascript 在更严格的语法条件下运行。 目的： 消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为 消除代码运行的一些不安全之处，为代码的安全运行保驾护航 为未来新版本的 Javascript 做好铺垫 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:2:1","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"使用 针对整个脚本文件：将use strict放在脚本文件的第一行，则整个脚本文件将以严格模式运行。 针对单个函数：将use strict放在函数体的第一行，则整个函数以严格模式运行。 PS：如果浏览器不支持，则这句话只解析为一条简单的语句, 没有任何副作用。 脚本文件的变通写法：因为第一种调用方法不利于文件合并，所以更好的做法是，借用第二种方法，将整个脚本文件放在一个立即执行的匿名函数之中。 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:2:2","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"语法和行为改变 必须用 var 声明变量 禁止自定义的函数中的 this 指向 window 创建 eval 作用域 对象不能有重名的属性 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:2:3","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"严格模式和普通模式的区别 下面列举几条严格模式的内容。 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:0","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"全局变量显式声明 在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，全局变量必须显式声明。 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:1","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"禁止 this 关键字指向全局对象： var foo = function () { console.log(this); }; foo(); 上方代码中，普通模式打印的是 window。严格模式下打印的是 undefined。 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:2","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"创设 eval 作用域 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:3","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"禁止使用 with 语句 因为 with 语句无法在编译时就确定，属性到底归属哪个对象。 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:4","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"构造函数必须通过 new 实例化对象 构造函数必须通过 new 实例化对象，否则报错。因为 this 为 undefined，此时无法设置属性。 比如说： var Cat = function (name) {\rthis.name = name;\r}\rCat('haha'); 上方代码中，如果在严格模式下，则会报错。 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:5","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"为了让代码更安全，禁止函数内部遍历调用栈 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:6","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"严格模式下无法删除变量 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:7","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"属性相关 普通模式下，对一个对象的只读属性进行赋值，不会报错，只会默默地失败。严格模式下，将报错。 严格模式下，对禁止扩展的对象添加新属性，会报错。 普通模式下，如果对象有多个重名属性，最后赋值的那个属性会覆盖前面的值。严格模式下，这属于语法错误。 普通模式下，如果函数有多个重名的参数，可以用 arguments[i]读取。严格模式下，多个重名的参数属于语法错误。 比如下面这样的代码： var obj = { username: 'smyh'; username: 'vae' } 上面的代码，在严格模式下属于语法错误，因为有重名的属性。 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:8","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"函数必须声明在顶层 将来 Javascript 的新版本会引入\"块级作用域\"。为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:9","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"新增关键字 为了向将来 Javascript 的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:3:10","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat2"],"content":"总结 至少要能答出四五条。 参考链接： 阮一峰 | Javascript 严格模式详解 ","date":"2022/11/22","objectID":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/:4:0","tags":null,"title":"ES5中的严格模式","uri":"/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/"},{"categories":["cat1"],"content":"description.","date":"2022/11/22","objectID":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/","tags":["tag1","tag2","tag3"],"title":"Es6的介绍和环境配置","uri":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/"},{"categories":["cat1"],"content":"前言 ","date":"2022/11/22","objectID":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/:1:0","tags":["tag1","tag2","tag3"],"title":"Es6的介绍和环境配置","uri":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/"},{"categories":["cat1"],"content":"ECMAScript 简介 ES 的全称是 ECMAScript，它是由 ECMA 国际标准化组织 制定的一套脚本语言的标准化规范。 详细来说，ES 是由 ECMA 的第 39 号技术专家委员会（Technical Committee 39，简称 TC39）负责制订 ECMAScript 标准，成员包括 Microsoft、Mozilla、Google 等公司。 PS：简单来说，ECMAScript 是 JS 的语言标准。当然，ECMAScript 还包括其他脚本语言的语言标准。 ","date":"2022/11/22","objectID":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/:1:1","tags":["tag1","tag2","tag3"],"title":"Es6的介绍和环境配置","uri":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/"},{"categories":["cat1"],"content":"ECMAScript 版本发布记录 1995 年：ECMAScript 诞生。 1997 年：ECMAScript 标准确立。ECMA 发布 ECMA-262 标准，推出浏览器标准语言 ECMAScript 1.0。 1999 年：发布 ES3；与此同时，IE5 风靡一时。 2009 年：发布 ECMAScript 5.0（简称 ES5）。例如 foreach、Object.keys、Object.create 和 json 标准。 2011 年：发布 ECMAScript5.1，成为 ISO 国际标准，从而推动所有浏览器都支持。 2015 年 6 月：发布 ECMAScript 6（简称 ES6），即 ECMAScript 2015。（注意，前者是按版本号区分，后者是按年份区分。ES 的后续的版本，请尽量用年份来命名。） 2016 年 6 月：发布 ECMAScript 7，即 ECMAScript 2016。 2017 年 6 月：发布 ECMAScript 8，即 ECMAScript 2017。 2018 年 6 月：发布 ECMAScript 9，即 ECMAScript 2018。 2019 年 6 月：发布 ECMAScript 10，即 ECMAScript 2019。 2020 年 6 月：发布 ECMAScript 11，即 ECMAScript 2020。 …… 此后，每年更新一版。 ","date":"2022/11/22","objectID":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/:1:2","tags":["tag1","tag2","tag3"],"title":"Es6的介绍和环境配置","uri":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/"},{"categories":["cat1"],"content":"ES6 简介 从上面的 ES 的版本记录可以看出：2015 年 6 月，ES6 正式发布。如果用年份来命名版本号，也可以称之为 ES2015。 ES6 是新的 JS 语法标准。ES6 实际上是一个泛指，泛指 ES 2015 及后续的版本。 很多人在做业务选型的时候，会倾向于选 jQuery。其实 jQuery 的语法是偏向于 ES3 的。而现在主流的框架 Vue.js 和 React.js 的默认语法，都是用的 ES6。 ES6 的改进如下： ES6 之前的变量提升，会导致程序在运行时有一些不可预测性。而 ES6 中通过 let、const 变量优化了这一点。 ES6 增加了很多功能，比如：常量、作用域、对象代理、异步处理、类、继承等。这些在 ES5 中想实现，比较复杂，但是 ES6 对它们进行了封装。 ES6 之前的语法过于松散，实现相同的功能，不同的人可能会写出不同的代码。 ES6 的目标是：让 JS 语言可以编写复杂的大型应用程序，成为企业级开发语言。 ","date":"2022/11/22","objectID":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/:1:3","tags":["tag1","tag2","tag3"],"title":"Es6的介绍和环境配置","uri":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/"},{"categories":["cat1"],"content":"ES6 的环境配置（为了兼容 ES5） 掌握 ES6 之后，如果要考虑 ES5 的兼容性，可以这样做：写 ES6 语法的 js 代码，然后通过 Babel将 ES6 转换为 ES5。 babel 的作用是将 ES6 语法转为 ES5 语法，支持低端浏览器。 但是，在这之前，我们需要配置一下相关的环境。 ","date":"2022/11/22","objectID":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/:2:0","tags":["tag1","tag2","tag3"],"title":"Es6的介绍和环境配置","uri":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/"},{"categories":["cat1"],"content":"建立工程目录 （1）先建立一个空的工程目录 ES6Demo，并在目录下建立两个文件夹 src和 dist： src：书写 ES6 代码，我们写的 js 程序都放在这里。 dist：利用 Babel 编译生成的 ES5 代码。我们在 HTML 页面需要引入 dist 里的 js 文件。 （2）在 src 里新建文件 index.html： \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c!-- 我们引入 ES5 中的 js 文件，而不是引入 ES6 中的 js 文件。 --\u003e \u003cscript src=\"./dist/index.js\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e\u003c/body\u003e \u003c/html\u003e 注意，上方代码中，我们引入的是dist目录下的 js 文件。 然后我们新建文件 src/index.js： let a = 'smyhvae'; const b = 'qianguyihao'; console.log(a); console.log(b); 这个文件是一个 ES6 语法 的 js 文件，稍后，我们尝试把这个 ES6 语法的 js 文件转化为 ES5 的 js 文件。 PS：我们在写代码时，能用单引号尽量用单引号，而不是双引号，前者在压缩之后，程序执行会更快。 ","date":"2022/11/22","objectID":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/:2:1","tags":["tag1","tag2","tag3"],"title":"Es6的介绍和环境配置","uri":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/"},{"categories":["cat1"],"content":"全局安装 Babel-cli （1）初始化项目： 在安装 Babel 之前，需要先用 npm init 先初始化我们的项目。打开终端或者通过 cmd 打开命令行工具，进入项目目录，输入如下命令： npm init -y 上方代码中，-y 代表全部默认同意，就不用一次次按回车了（稍后再根据需要，在文件中手动修改）。命令执行完成后，会在项目的根目录下生成 package.json 文件： { \"name\": \"es6demo\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\" }, \"author\": \"smyhvae\", \"license\": \"ISC\" } PS：VS Code 里打开终端的快捷键是：Contol + ~。 （2）全局安装 Babel-cli： 在终端中输入以下命令： npm install -g babel-cli 如果安装比较慢的话，Mac 下可以使用cnpm进行安装 ，windows 下可以使用nrm切换到 taobao 的镜像。 （3）本地安装 babel-preset-es2015 和 babel-cli： npm install --save-dev babel-preset-es2015 babel-cli 安装完成后，会发现package.json文件，已经多了 devDependencies 选项： （4）新建.babelrc： 在根目录下新建文件.babelrc，输入如下内容： {\r\"presets\":[\r\"es2015\"\r],\r\"plugins\":[]\r} （5）开始转换： 现在，我们应该可以将 ES6 的文件转化为 ES5 的文件了，命令如下：（此命令略显复杂） babel src/index.js -o dist/index.js 我们可以将上面这个命令进行简化一下。操作如下： 在文件 package.json 中修改键 scripts中的内容： \"scripts\": { \"build\": \"babel src/index.js -o dist/index.js\" }, 修改后的效果如下： 目前为止，环境配置好了。以后，我们执行如下命令，即可将src/index.js这个 ES6 文件转化为 dist/index.js这个 ES5 文件： npm run build 我们执行上面的命令之后，会发现， dist 目录下会生成 ES5 的 js 文件： index.js： 'use strict'; var a = 'smyhvae'; var b = 'qianguyihao'; console.log(a); console.log(b); 当我们打开网页后，就可以在浏览器的控制台，看到代码的输出结果。 本段内容的参考链接：http://jspang.com/2017/06/03/es6/ ","date":"2022/11/22","objectID":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/:2:2","tags":["tag1","tag2","tag3"],"title":"Es6的介绍和环境配置","uri":"/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/"},{"categories":["cat1"],"content":"description.","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":["cat1"],"content":"ES6 的变量声明 ES5 中，使用 var 定义全局变量（ var 是 variable 的简写）。 ES6 中，新增了 let 和 const 来定义变量： let：定义局部变量，替代 var。 const：定义常量（定义后，不可修改）。 ","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/:1:0","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":["cat1"],"content":"1、var：定义全局变量 看下面的代码： { var a = 1; } console.log(a); //这里的 a，指的是 区块 里的 a 上方代码是可以输出结果的，输出结果为 1。因为 var 是全局声明的，所以，即使是在区块里声明，但仍然在全局起作用。 也就是说：使用 var 声明的变量不具备块级作用域特性。 再来看下面这段代码： var a = 1; { var a = 2; } console.log(a); //这里的 a，指的是 区块 里的 a 上方代码的输出结果为 2 ，因为 var 是全局声明的。 总结： 用 var 定义的全部变量，有时候会污染整个 js 的作用域。我们在如今的实战中，基本都是用的 ES6 语法，所以请尽量避免使用 var 定义变量。 ","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/:1:1","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":["cat1"],"content":"2、let：定义局部变量 举例 1： { let a = 'hello'; } console.log(a); // 打印结果报错：Uncaught ReferenceError: a is not defined 上方代码，打印报错。 举例 2： var a = 2; { let a = 3; } console.log(a); // 打印结果：2 通过上面两个例子可以看出，用 let 声明的变量，只在局部（块级作用域内）起作用。 经典面试题： let 可以防止数据污染，我们来看下面这个 for 循环的经典面试题。 1、用 var 声明变量： for (var i = 0; i \u003c 10; i++) { console.log('循环体中:' + i); } console.log('循环体外:' + i); 上方代码可以正常打印结果，且最后一行的打印结果是 10。说明循环体外定义的变量 i，是全局作用域下的 i。 2、用 let 声明变量： for (let i = 0; i \u003c 10; i++) { console.log('循环体中:' + i); // // 每循环一次，就会在 { } 所在的块级作用域中，重新定义一个新的变量 i } console.log('循环体外:' + i); 上方代码的关键在于：每次循环都会产生一个块级作用域，每个块级作用域中会重新定义一个新的变量 i。 另外，上方代码的最后一行无法打印结果，也就是说打印会报错。因为用 let 定义的变量 i，只在{ }这个块级作用域里生效。 总结：我们要习惯用 let 声明，减少 var 声明带来的污染全局空间。 为了进一步说明 let 不会带来污染，需要说明的是：当我们定义了let a = 1时，如果我们在同一个作用域内继续定义let a = 2，是会报错的。 ","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/:1:2","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":["cat1"],"content":"3、const：定义常量 在程序开发中，有些变量是希望声明后，在业务层就不再发生变化，此时可以用 const 来定义常量。常量就是值（内存地址）不能变化的量。 举例： const name = 'smyhvae'; //定义常量 用 const 声明的常量，只在局部（块级作用域内）起作用；而且，用 const 声明常量时，必须赋值，否则报错。 ","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/:1:3","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":["cat1"],"content":"let 和 const 的特点【重要】 不存在变量提升 禁止重复声明 支持块级作用域 暂时性死区 相反， 用var声明的变量：存在变量提升、可以重复声明、没有块级作用域。 ","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/:1:4","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":["cat1"],"content":"var/let/const 的共同点 全局作用域中定义的变量，可以在函数中使用。 函数中声明的变量，只能在函数及其子函数中使用，外部无法使用。 ","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/:1:5","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":["cat1"],"content":"总结 关于 let、const、var 更详细的介绍和区别，可以看本项目的另一篇文章《JavaScript 进阶/var、let、const 的区别.md》。 ","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/:1:6","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":["cat1"],"content":"for 循环举例（经典案例） 代码 1、我们先来看看如下代码：（用 var 定义变量 i） \u003c!DOCTYPE html\u003e \u003chtml lang=\"\"\u003e \u003chead\u003e \u003cmeta /\u003e \u003cmeta /\u003e \u003cmeta /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cinput type=\"button\" value=\"aa\" /\u003e \u003cinput type=\"button\" value=\"bb\" /\u003e \u003cinput type=\"button\" value=\"cc\" /\u003e \u003cinput type=\"button\" value=\"dd\" /\u003e \u003cscript\u003e var myBtn = document.getElementsByTagName('input'); for (var i = 0; i \u003c myBtn.length; i++) { myBtn[i].onclick = function () { alert(i); }; } \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 上方代码中的运行效果如下： 你可能会感到诧异，为何点击任何一个按钮，弹出的内容都是 4 呢？这是因为，我们用 var 定义的变量 i，是在全局作用域声明的。整个代码中，自始至终只有一个变量。 for 循环是同步代码，而 onclick 点击事件是异步代码。当我们还没点击按钮之前，同步代码已经执行完了，变量 i 已经循环到 4 了。 也就是说，上面的 for 循环，相当于如下代码： var i = 0; myBtn[0].onclick = function () { alert(i); }; i++; myBtn[1].onclick = function () { alert(i); }; i++; myBtn[2].onclick = function () { alert(i); }; i++; myBtn[3].onclick = function () { alert(i); }; i++; // 到这里，i 的值已经是4了。因此，当我们点击按钮时，i的值一直都是4 代码 2、上面的代码中，如果我们改为用 let 定义变量 i： \u003c!DOCTYPE html\u003e \u003chtml lang=\"\"\u003e \u003chead\u003e \u003cmeta /\u003e \u003cmeta /\u003e \u003cmeta /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cinput type=\"button\" value=\"aa\" /\u003e \u003cinput type=\"button\" value=\"bb\" /\u003e \u003cinput type=\"button\" value=\"cc\" /\u003e \u003cinput type=\"button\" value=\"dd\" /\u003e \u003cscript\u003e var myBtn = document.getElementsByTagName('input'); for (let i = 0; i \u003c myBtn.length; i++) { myBtn[i].onclick = function () { alert(i); }; } \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 上方代码中的运行效果如下： 上面这个运行结果，才是我们预期的效果。我们用 let 定义变量 i，在循环的过程中，每执行一次循环体，就会诞生一个新的 i。循环体执行 4 次，就会有四个 i。 ","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/:2:0","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":["cat1"],"content":"暂时性死区 DTC ES6 规定：使用 let/const 声明的变量，会使区块形成封闭的作用域。若在声明之前使用变量，就会报错。 也就是说，在使用 let/const 声明变量时，变量需要先声明，再使用（声明语句必须放在使用之前）。这在语法上，称为 “暂时性死区”（ temporal dead zone，简称 TDZ）。 DTC 其实是一种保护机制，可以让我们养成良好的编程习惯。 代码举例： const name = 'qianguyihao'; function foo() { console.log(name); const name = 'hello'; } foo(); // 执行函数后，控制台报错：Uncaught ReferenceError: Cannot access 'name' before initialization ","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/:3:0","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":["cat1"],"content":"参考链接： 阮一峰 | ECMAScript 6 入门 ","date":"2022/11/22","objectID":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/:4:0","tags":["tag1","tag2","tag3"],"title":"let、const和块级作用域","uri":"/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/"},{"categories":null,"content":"链式调用：基于 Promise 处理多次 Ajax 请求【重要】 实际开发中，我们经常需要同时请求多个接口。比如说：在请求完接口1的数据data1之后，需要根据data1的数据，继续请求接口 2，获取data2；然后根据data2的数据，继续请求接口 3。 换而言之，现在有三个网络请求，请求 2 必须依赖请求 1 的结果，请求 3 必须依赖请求 2 的结果，如果按照往常的写法，会有三层回调，会陷入“回调地狱”。 这种场景其实就是接口的多层嵌套调用。有了 Promise 之后，我们可以把多层嵌套调用按照线性的方式进行书写，非常优雅。也就是说：Promise 可以把原本的多层嵌套调用改进为链式调用。 代码举例：（多次 Ajax 请求，链式调用） \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e const request = require('request'); // Promise 封装接口1 const request1 = function () { const promise = new Promise((resolve, reject) =\u003e { request('https://www.baidu.com', function (response) { if (response.retCode == 200) { // 这里的 response 是接口1的返回结果 resolve('request1 success' + response); } else { reject('接口请求失败'); } }); }); return promise; }; // Promise 封装接口2 const request2 = function () { const promise = new Promise((resolve, reject) =\u003e { request('https://www.jd.com', function (response) { if (response.retCode == 200) { // 这里的 response 是接口2的返回结果 resolve('request2 success' + response); } else { reject('接口请求失败'); } }); }); return promise; }; // Promise 封装接口3 const request3 = function () { const promise = new Promise((resolve, reject) =\u003e { request('https://www.taobao.com', function (response) { if (response.retCode == 200) { // 这里的 response 是接口3的返回结果 resolve('request3 success' + response); } else { reject('接口请求失败'); } }); }); return promise; }; // 先发起request1，等resolve后再发起request2；紧接着，等 request2有了 resolve之后，再发起 request3 request1() .then((res1) =\u003e { // 接口1请求成功后，打印接口1的返回结果 console.log(res1); return request2(); }) .then((res2) =\u003e { // 接口2请求成功后，打印接口2的返回结果 console.log(res2); return request3(); }) .then((res3) =\u003e { // 接口3请求成功后，打印接口3的返回结果 console.log(res3); }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 上面代码中，then 是可以链式调用的，后面的 then 可以拿到前面 resolve 出来的数据。 这个举例很经典，需要多看几遍。 ","date":"2022/11/22","objectID":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/:1:0","tags":null,"title":"Promise的常见用法","uri":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/"},{"categories":null,"content":"return 的函数返回值 return 后面的返回值，有两种情况： 情况 1：返回 Promise 实例对象。返回的该实例对象会调用下一个 then。 情况 2：返回普通值。返回的普通值会直接传递给下一个 then，通过 then 参数中函数的参数接收该值。 我们针对上面这两种情况，详细解释一下。 ","date":"2022/11/22","objectID":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/:2:0","tags":null,"title":"Promise的常见用法","uri":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/"},{"categories":null,"content":"情况 1：返回 Promise 实例对象 举例如下：（这个例子，跟上一段 Ajax 链式调用 的例子差不多） \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript type=\"text/javascript\"\u003e /* 基于Promise发送Ajax请求 */ function queryData(url) { return new Promise((resolve, reject) =\u003e { var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () { if (xhr.readyState != 4) return; if (xhr.readyState == 4 \u0026\u0026 xhr.status == 200) { // 处理正常情况 resolve(xhr.responseText); } else { // 处理异常情况 reject('接口请求失败'); } }; xhr.responseType = 'json'; // 设置返回的数据类型 xhr.open('get', url); xhr.send(null); // 请求接口 }); } // 发送多个ajax请求并且保证顺序 queryData('http://localhost:3000/api1') .then( (data1) =\u003e { console.log(JSON.stringify(data1)); return queryData('http://localhost:3000/api2'); }, (error1) =\u003e { console.log(error1); } ) .then( (data2) =\u003e { console.log(JSON.stringify(data2)); // 这里的 return，返回的是 Promise 实例对象 return new Promise((resolve, reject) =\u003e { resolve('qianguyihao'); }); }, (error2) =\u003e { console.log(error2); } ) .then((data3) =\u003e { console.log(data3); }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2022/11/22","objectID":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/:2:1","tags":null,"title":"Promise的常见用法","uri":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/"},{"categories":null,"content":"情况 2：返回 普通值 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript type=\"text/javascript\"\u003e /* 基于Promise发送Ajax请求 */ function queryData(url) { return new Promise((resolve, reject) =\u003e { var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () { if (xhr.readyState != 4) return; if (xhr.readyState == 4 \u0026\u0026 xhr.status == 200) { // 处理正常情况 resolve(xhr.responseText); } else { // 处理异常情况 reject('接口请求失败'); } }; xhr.responseType = 'json'; // 设置返回的数据类型 xhr.open('get', url); xhr.send(null); // 请求接口 }); } // 发送多个ajax请求并且保证顺序 queryData('http://localhost:3000/api1') .then( (data1) =\u003e { console.log(JSON.stringify(data1)); return queryData('http://localhost:3000/api2'); }, (error1) =\u003e { console.log(error1); } ) .then( (data2) =\u003e { console.log(JSON.stringify(data2)); // 返回普通值 return 'qianguyihao'; }, (error2) =\u003e { console.log(error2); } ) /* 既然上方返回的是 普通值，那么，这里的 then 是谁来调用呢？ 答案是：这里会产生一个新的 默认的 promise实例，来调用这里的then，确保可以继续进行链式操作。 */ .then((data3) =\u003e { // 这里的 data3 接收的是 普通值 'qianguyihao' console.log(data3); }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2022/11/22","objectID":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/:2:2","tags":null,"title":"Promise的常见用法","uri":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/"},{"categories":null,"content":"Promise 的常用 API：实例方法【重要】 Promise 自带的 API 提供了如下实例方法： promise.then()：获取异步任务的正常结果。 promise.catch()：获取异步任务的异常结果。 promise.finaly()：异步任务无论成功与否，都会执行。 代码举例如下。 写法 1： \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e function queryData() { return new Promise((resolve, reject) =\u003e { setTimeout(function () { var data = { retCode: 0, msg: 'qianguyihao' }; // 接口返回的数据 if (data.retCode == 0) { // 接口请求成功时调用 resolve(data); } else { // 接口请求失败时调用 reject({ retCode: -1, msg: 'network error' }); } }, 100); }); } queryData() .then((data) =\u003e { // 从 resolve 获取正常结果 console.log('接口请求成功时，走这里'); console.log(data); }) .catch((data) =\u003e { // 从 reject 获取异常结果 console.log('接口请求失败时，走这里'); console.log(data); }) .finally(() =\u003e { console.log('无论接口请求成功与否，都会走这里'); }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 写法 2：（和上面的写法 1 等价） \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e function queryData() { return new Promise((resolve, reject) =\u003e { setTimeout(function () { var data = { retCode: 0, msg: 'qianguyihao' }; // 接口返回的数据 if (data.retCode == 0) { // 接口请求成功时调用 resolve(data); } else { // 接口请求失败时调用 reject({ retCode: -1, msg: 'network error' }); } }, 100); }); } queryData() .then( (data) =\u003e { // 从 resolve 获取正常结果 console.log('接口请求成功时，走这里'); console.log(data); }, (data) =\u003e { // 从 reject 获取异常结果 console.log('接口请求失败时，走这里'); console.log(data); } ) .finally(() =\u003e { console.log('无论接口请求成功与否，都会走这里'); }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 注意：写法 1 和写法 2 的作用是完全等价的。只不过，写法 2 是把 catch 里面的代码作为 then 里面的第二个参数而已。 ","date":"2022/11/22","objectID":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/:3:0","tags":null,"title":"Promise的常见用法","uri":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/"},{"categories":null,"content":"Promise 的常用 API：对象方法【重要】 Promise 自带的 API 提供了如下对象方法： Promise.all()：并发处理多个异步任务，所有任务都执行成功，才能得到结果。 Promise.race(): 并发处理多个异步任务，只要有一个任务执行成功，就能得到结果。 下面来详细介绍。 ","date":"2022/11/22","objectID":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/:4:0","tags":null,"title":"Promise的常见用法","uri":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/"},{"categories":null,"content":"Promise.all() 代码举例 代码举例： \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript type=\"text/javascript\"\u003e /* 封装 Promise 接口调用 */ function queryData(url) { return new Promise((resolve, reject) =\u003e { var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () { if (xhr.readyState != 4) return; if (xhr.readyState == 4 \u0026\u0026 xhr.status == 200) { // 处理正常结果 resolve(xhr.responseText); } else { // 处理异常结果 reject('服务器错误'); } }; xhr.open('get', url); xhr.send(null); }); } var promise1 = queryData('http://localhost:3000/api1'); var promise2 = queryData('http://localhost:3000/api2'); var promise3 = queryData('http://localhost:3000/api3'); Promise.all([promise1, promise2, promise3]).then((result) =\u003e { console.log(result); }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2022/11/22","objectID":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/:4:1","tags":null,"title":"Promise的常见用法","uri":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/"},{"categories":null,"content":"Promise.race() 代码举例 代码举例： \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript type=\"text/javascript\"\u003e /* 封装 Promise 接口调用 */ function queryData(url) { return new Promise((resolve, reject) =\u003e { var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () { if (xhr.readyState != 4) return; if (xhr.readyState == 4 \u0026\u0026 xhr.status == 200) { // 处理正常结果 resolve(xhr.responseText); } else { // 处理异常结果 reject('服务器错误'); } }; xhr.open('get', url); xhr.send(null); }); } var promise1 = queryData('http://localhost:3000/api1'); var promise2 = queryData('http://localhost:3000/api2'); var promise3 = queryData('http://localhost:3000/api3'); Promise.race([promise1, promise2, promise3]).then((result) =\u003e { console.log(result); }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2022/11/22","objectID":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/:4:2","tags":null,"title":"Promise的常见用法","uri":"/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/"},{"categories":null,"content":"前言：异步和回调 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:1:0","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"异步 JavaScript 的执行环境是单线程。 所谓单线程，是指 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为主线程。 异步模式可以一起执行多个任务。常见的异步模式有以下几种： 定时器 接口调用 事件函数 今天这篇文章，我们重点讲一下接口调用。接口调用里，重点讲一下Promise。 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:1:1","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"接口调用的方式 js 中常见的接口调用方式，有以下几种： 原生 ajax、基于 jQuery 的 ajax Promise Fetch axios ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:1:2","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"多次异步调用的顺序 多次异步调用的结果，顺序可能不同步。 异步调用的结果如果存在依赖，则需要通过回调函数进行嵌套。 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:1:3","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"回调地狱的举例 假设买菜、做饭、洗碗、倒厨余垃圾都是异步的。 但真实的场景中，实际的操作流程是：买菜成功之后，才能开始做饭。做饭成功后，才能开始洗碗。洗碗结束后， 再倒厨余垃圾。这里的一系列动作就涉及到了多层嵌套调用，也就是回调地狱。 在 ES5 中，当进行多层嵌套回调时，会导致代码层次过多，很难进行后续维护和二次开发；而且会导致回调地狱的问题。ES6 中的 Promise 就可以解决这两个问题。 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:1:4","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Promise 概述 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:2:0","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"为什么需要 Promise？ 如上一段所述，Javascript 是⼀⻔单线程语⾔。早期我们解决异步场景时，⼤部分情况都是通过回调函数来进⾏。 例如在浏览器中发送 ajax 请求，就是常⻅的⼀个异步场景，发送请求后，需要等待一段时间，等服务端响应之后我们才能拿到结果。如果我们希望在异步结束之后执⾏某个操作，就只能通过回调函数这样的⽅式进⾏操作。 var dynamicFunc = function (callback) { setTimeout(function () { callback(); }, 1000); }; dynamicFunc(function () { console.log('qian gu'); }); 例如上⾯这个例⼦，dynamicFunc 就是⼀个异步函数，⾥⾯ setTimeout 会在 1s 之后调⽤传⼊的 callback 函数。按照上⾯的调⽤⽅式，最终 1s 之后，会打印 qian gu 这个结果。 同样的，如果后续还有内容需要在异步函数结束时输出，就需要多个异步函数进⾏嵌套，⾮常不利于后续的维护，而且会导致回调地狱的问题： setTimeout(function () { console.log('qiangu1'); setTimeout(function () { console.log('qiangu2'); }, 2000); }, 1000); 为了能使回调函数以更优雅的⽅式进⾏调⽤，在 ES6 语法中，新增了⼀个名为 Promise 的新规范。 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:2:1","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Promise 的介绍和优点 ES6 中的 Promise 是异步编程的一种方案。从语法上讲，Promise 是一个对象，它可以获取异步操作的消息。 Promise 对象, 可以用同步的表现形式来书写异步代码（也就是说，代码看起来是同步的，但本质上的运行过程是异步的）。使用 Promise 主要有以下好处： 可以很好地解决回调地狱的问题（避免了层层嵌套的回调函数）。 语法非常简洁、可读性强，便于后期维护。Promise 对象提供了简洁的 API，使得控制异步操作更加容易。 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:2:2","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Promise 基础 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:3:0","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Promise 的基本用法 （1）通过 new Promise() 构造出一个 Promise 实例。Promise 的构造函数中传入一个参数，这个参数是一个函数，该函数用于处理异步任务。 （2）函数中传入两个参数：resolve 和 reject，分别表示异步执行成功后的回调函数和异步执行失败后的回调函数。代表着我们需要改变当前实例的状态到已完成或是已拒绝。 （3）通过 promise.then() 处理返回结果（这里的 promise 指的是 Promise 实例）。 接下来，我们来具体看看， promise 的代码是怎么写的。 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:3:1","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Promise 处理异步任务的过程 通过 Promise 处理异步任务的典型写法如下： // 第一步：model层的接口封装 function promiseA() { return new Promise((resolve, reject) =\u003e { // 这里做异步任务（比如 ajax 请求接口。这里暂时用定时器代替） setTimeout(() =\u003e { var data = { retCode: 0, msg: 'qianguyihao' }; // 接口返回的数据，返回码 retCode 是动态数据 if (data.retCode == 0) { // 接口请求成功时调用 resolve(data); } else { // 接口请求失败时调用 reject({ retCode: -1, msg: 'network error' }); } }, 100); }); } // 第二步：业务层的接口调用。这里的 data 就是 从 resolve 和 reject 传过来的，也就是从接口拿到的数据 promiseA() .then((data) =\u003e { // 从 resolve 获取正常结果 console.log(data); }) .catch((e) =\u003e { // 从 reject 获取异常结果 console.log(e); }); 上方代码中，当从接口返回的数据data.retCode的值（接口返回码）不同时，可能会走 resolve，也可能会走 reject，这个由你自己的业务决定。 上面的写法中，是将 promise 实例定义成了一个函数 PromiseA。我们也可以将 promise 实例定义成一个变量 promiseB，达到的效果是一模一样的。写法如下：（写法上略有区别） // 第一步：model层的接口封装 const promiseB = new Promise((resolve, reject) =\u003e { // 这里做异步任务（比如ajax 请求接口。这里暂时用定时器代替） setTimeout(() =\u003e { var data = { retCode: 0, msg: 'qianguyihao' }; // 接口返回的数据，返回码 retCode 是动态数据 if (data.retCode == 0) { // 接口请求成功时调用 resolve(data); } else { // 接口请求失败时调用 reject({ retCode: -1, msg: 'network error' }); } }, 100); }); // 第二步：业务层的接口调用。这里的 data 就是 从 resolve 和 reject 传过来的，也就是从接口拿到的数据 promiseB .then((data) =\u003e { // 从 resolve 获取正常结果 console.log(data); }) .catch((e) =\u003e { // 从 reject 获取异常结果 console.log(e); }); ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:3:2","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"捕获 reject 异常状态的两种写法 我们有两种写法可以捕获并处理 reject 异常状态。上一小段中，用的就是其中一种写法。 这两种写法的代码举例如下： // 第一步：model层的接口封装 function promiseA() { return new Promise((resolve, reject) =\u003e { // 这里做异步任务（比如 ajax 请求接口。这里暂时用定时器代替） setTimeout(() =\u003e { var data = { retCode: 0, msg: 'qianguyihao' }; // 接口返回的数据，返回码 retCode 是动态数据 if (data.retCode == 0) { // 接口请求成功时调用 resolve(data); } else { // 接口请求失败时调用 reject({ retCode: -1, msg: 'network error' }); } }, 100); }); } const onResolve = function (value) { console.log(value); }; const onReject = function (e) { console.log(e); }; // 写法1：通过 catch 方法捕获 状态变为已拒绝时的 promise promiseA().then(onResolve).catch(onReject); // 写法2：then 可以传两个参数，第⼀个参数为 resolve 后执⾏，第⼆个参数为 reject 后执⾏ promiseA().then(onResolve, onReject); // 【错误写法】写法3：通过 try catch 捕获 状态变为已拒绝时的 promise // 这种写法是错误的，因为 try catch只能捕获同步代码里的异常，而 promise.reject() 是异步代码。 try { promiseA().then(onResolve); } catch (e) { // 语法上，catch必须要传入一个参数，否则报错 onReject(e); } 需要注意的是： （1）上面的写法 3 是错误的。运行之后，控制台会报如下错误： 解释如下： try-catch 主要用于捕获异常，注意，这里的异常是指同步函数的异常。如果 try 里面的异步方法出现了异常，此时 catch 是无法捕获到异常的。 原因是：当异步函数抛出异常时，对于宏任务而言，执行函数时已经将该函数推入栈，此时并不在 try-catch 所在的栈，所以 try-catch 并不能捕获到错误。对于微任务而言（比如 promise）promise 的构造函数的异常只能被自带的 reject 也就是.catch 函数捕获到。 （2）写法1中，promiseA().then().catch()和promiseA().catch().then()区别在于：前者可以捕获到 then 里面的异常，后者不可以。 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:3:3","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"小结 1、promise 有三种状态：等待中、成功、失败。等待中状态可以更改为成功或失败，已经更改过状态后⽆法继续更改（例如从失败改为成功）。 2、promise 实例中需要传⼊⼀个函数，他接受两个函数参数，执⾏第⼀个参数之后就会改变当前 promise 为「成功」状态，执⾏第⼆个参数之后就会变为「失败」状态。 3、通过 .then ⽅法，即可在上⼀个 promise 达到成功时继续执⾏下⼀个函数或 promise。同时通过 resolve 或 reject 时传⼊参数，即可给下⼀个函数或 promise 传⼊初始值。 4、失败的 promise，后续可以通过 promise 自带的 .catch ⽅法或是 .then ⽅法的第⼆个参数进⾏捕获。 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:3:4","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Promise 规范 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:4:0","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Promise 规范解读 Promise 是⼀个拥有 then ⽅法的对象或函数。任何符合 promise 规范的对象或函数都可以成为 Promise。 关于promise 规范的详细解读，可以看下面这个链接： Promises/A+ 规范：https://promisesaplus.com/ ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:4:1","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"promise 对象的 3 个状态 初始化（等待中）：pending 成功：fulfilled 失败：rejected （1）当 new Promise()执行之后，promise 对象的状态会被初始化为pending，这个状态是初始化状态。new Promise()这行代码，括号里的内容是同步执行的。括号里定义一个 function，function 有两个参数：resolve 和 reject。如下： 如果请求成功了，则执行 resolve()，此时，promise 的状态会被自动修改为 fulfilled。 如果请求失败了，则执行 reject()，此时，promise 的状态会被自动修改为 rejected （2）promise.then()方法，括号里面有两个参数，分别代表两个函数 function1 和 function2： 如果 promise 的状态为 fulfilled（意思是：如果请求成功），则执行 function1 里的内容 如果 promise 的状态为 rejected（意思是，如果请求失败），则执行 function2 里的内容 另外，resolve()和 reject()这两个方法，是可以给 promise.then()传递参数的。 完整代码举例如下： let promise = new Promise((resolve, reject) =\u003e { //进来之后，状态为pending console.log('111'); //这行代码是同步的 //开始执行异步操作（这里开始，写异步的代码，比如ajax请求 or 开启定时器） if (异步的ajax请求成功) { console.log('333'); resolve('haha'); //如果请求成功了，请写resolve()，此时，promise的状态会被自动修改为fulfilled } else { reject('555'); //如果请求失败了，请写reject()，此时，promise的状态会被自动修改为rejected } }); console.log('222'); //调用promise的then() promise.then( (successMsg) =\u003e { //如果promise的状态为fulfilled，则执行这里的代码 console.log(successMsg, '成功了'); }, (errorMsg) =\u003e { //如果promise的状态为rejected，则执行这里的代码 console.log(errorMsg, '失败了'); } ); ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:5:0","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"如何封装异步操作为 promise ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:6:0","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Promise 封装异步任务 传统写法： 写法 1： // 定义一个异步的延迟函数：异步函数结束1秒之后，再执行cb回调函数 function fun1(cb) { setTimeout(function () { console.log('即将执行cb回调函数'); cb(); }, 1000); } // 先执行异步函数 fun1，再执行回调函数 myCallback fun1(myCallback); // 定义回调函数 function myCallback() { console.log('我是延迟执行的cb回调函数'); } 写法 2：（精简版，更常见） // 定义一个异步的延迟函数：异步函数结束1秒之后，再执行cb回调函数 function fun1(cb) { setTimeout(cb, 1000); } // 先执行异步函数fun1，再执行回调函数 fun1(function () { console.log('我是延迟执行的cb回调函数'); }); 上⾯的例⼦就是最传统的写法，在异步结束后通过传入回调函数的方式执⾏函数。 学习 Promise 之后，我们可以将这个异步函数封装为 Promise，如下。 Promise 写法： function fun2() { return new Promise((resolve) =\u003e { setTimeout(resolve, 1000); }); } /* 【重要】上面的 fun2 也可以写成： function fun2() { return new Promise((resolve) =\u003e { setTimeout(() =\u003e { resolve(); }, 1000); }); } */ // 先执行异步函数fun1，再执行回调函数 fun2().then(() =\u003e { console.log('我是延迟执行的回调函数'); }); ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:6:1","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Promise 封装 Ajax 请求 传统写法： // 定义 ajax 请求：传入回调函数 success 和 fail function ajax(url, success, fail) { var client = new XMLHttpRequest(); client.open('GET', url); client.onreadystatechange = function () { if (this.readyState !== 4) { return; } if (this.status === 200) { success(this.response); } else { fail(new Error(this.statusText)); } }; client.send(); } // 执行 ajax 请求 ajax( '/ajax.json', function () { console.log('qianguyihao 成功'); }, function () { console.log('失败'); } ); 上面的传统写法里，定义和执行 ajax 时需要传⼊ success 和 fail 这两个回调函数，进而执行回调函数。 有了 Promise 之后，我们不需要传入回调函数，而是： 先将 promise 实例化； 然后在原来执行回调函数的地方，改为执行对应的改变 promise 状态的函数； 并通过 then … catch 或者 then …then 等写法，实现链式调用，提高代码可读性。 和传统写法相比，promise 在写法上的大致区别是：定义异步函数的时候，将 callback 改为 resolve 和 reject，待状态改变之后，我们在外面控制具体执行哪些函数。 Promise 写法： const request = require('request'); // Promise 定义接口 function request1() { return new Promise((resolve, reject) =\u003e { request('https://www.baidu.com', (response) =\u003e { if (response.retCode == 200) { // 这里的 response 是接口1的返回结果 resolve('request1 success' + response); } else { reject('接口请求失败'); } }); }); } request1() .then((res1) =\u003e { // 接口1请求成功后，打印接口1的返回结果 console.log(res1); return request2(); }) .catch((e) =\u003e { // 从 reject 获取异常结果 console.log(e); }); ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:6:2","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"总结 了解这些内容之后， 你已经对 Promise 有了基本了解。下一篇文章，我们来讲一讲 Promise在实战开发的常见用法。 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:7:0","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"参考链接 当面试官问你 Promise 的时候，他究竟想听到什么？ 手写一个 Promise/A+,完美通过官方 872 个测试用例 ","date":"2022/11/22","objectID":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/:8:0","tags":null,"title":"Promise入门详解","uri":"/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/"},{"categories":null,"content":"Symbol ","date":"2022/11/22","objectID":"/archives/symbol.html/:1:0","tags":null,"title":"Symbol","uri":"/archives/symbol.html/"},{"categories":null,"content":"概述 背景：ES5中对象的属性名都是字符串，容易造成重名，污染环境。 概念：ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。 特点： Symbol属性对应的值是唯一的，解决命名冲突问题 Symbol值不能与其他数据进行计算，包括同字符串拼串 for in、for of 遍历时不会遍历Symbol属性。 ","date":"2022/11/22","objectID":"/archives/symbol.html/:1:1","tags":null,"title":"Symbol","uri":"/archives/symbol.html/"},{"categories":null,"content":"创建Symbol属性值 Symbol是函数，但并不是构造函数。创建一个Symbol数据类型： let mySymbol = Symbol(); console.log(typeof mySymbol); //打印结果：symbol console.log(mySymbol); //打印结果：Symbol() 打印结果： 下面来讲一下Symbol的使用。 ","date":"2022/11/22","objectID":"/archives/symbol.html/:1:2","tags":null,"title":"Symbol","uri":"/archives/symbol.html/"},{"categories":null,"content":"1、将Symbol作为对象的属性值 let mySymbol = Symbol(); let obj = { name: 'smyhvae', age: 26 }; //obj.mySymbol = 'male'; //错误：不能用 . 这个符号给对象添加 Symbol 属性。 obj[mySymbol] = 'hello'; //正确：通过**属性选择器**给对象添加 Symbol 属性。后面的属性值随便写。 console.log(obj); 上面的代码中，我们尝试给obj添加一个Symbol类型的属性值，但是添加的时候，不能采用.这个符号，而是应该用属性选择器的方式。打印结果： 现在我们用for in尝试对上面的obj进行遍历： let mySymbol = Symbol(); let obj = { name: 'smyhvae', age: 26 }; obj[mySymbol] = 'hello'; console.log(obj); //遍历obj for (let i in obj) { console.log(i); } 打印结果： 从打印结果中可以看到：for in、for of 遍历时不会遍历Symbol属性。 ","date":"2022/11/22","objectID":"/archives/symbol.html/:1:3","tags":null,"title":"Symbol","uri":"/archives/symbol.html/"},{"categories":null,"content":"创建Symbol属性值时，传参作为标识 如果我通过 Symbol()函数创建了两个值，这两个值是不一样的： let mySymbol1 = Symbol(); let mySymbol2 = Symbol(); console.log(mySymbol1 == mySymbol2); //打印结果：false console.log(mySymbol1); //打印结果：Symbol() console.log(mySymbol2); //打印结果：Symbol() 上面代码中，倒数第三行的打印结果也就表明了，二者的值确实是不相等的。 最后两行的打印结果却发现，二者的打印输出，肉眼看到的却相同。那该怎么区分它们呢？ 既然Symbol()是函数，函数就可以传入参数，我们可以通过参数的不同来作为标识。比如： //在括号里加入参数，来标识不同的Symbol let mySymbol1 = Symbol('one'); let mySymbol2 = Symbol('two'); console.log(mySymbol1 == mySymbol2); //打印结果：false console.log(mySymbol1); //打印结果：Symbol(one) console.log(mySymbol2); //打印结果：Symbol(two)。颜色为红色。 console.log(mySymbol2.toString());//打印结果：Symbol(two)。颜色为黑色。 打印结果： ","date":"2022/11/22","objectID":"/archives/symbol.html/:1:4","tags":null,"title":"Symbol","uri":"/archives/symbol.html/"},{"categories":null,"content":"定义常量 Symbol 可以用来定义常量： const MY_NAME = Symbol('my_name'); ","date":"2022/11/22","objectID":"/archives/symbol.html/:1:5","tags":null,"title":"Symbol","uri":"/archives/symbol.html/"},{"categories":null,"content":"内置的 Symbol 值 除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。 Symbol.iterator属性 对象的Symbol.iterator属性，指向该对象的默认遍历器方法。 ","date":"2022/11/22","objectID":"/archives/symbol.html/:1:6","tags":null,"title":"Symbol","uri":"/archives/symbol.html/"},{"categories":["cat3"],"content":"解构赋值的概念 解构赋值：ES6 允许我们，按照一一对应的方式，从数组或者对象中提取值，再将提取出来的值赋值给变量。 解构：分解数据结构；赋值：给变量赋值。 解构赋值在实际开发中可以大量减少我们的代码量，并且让程序结构更清晰。 ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:1:0","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"数组的解构赋值 数组的结构赋值：将数组中的值按照位置提取出来，然后赋值给变量。 ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:2:0","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"语法 在 ES6 之前，当我们在为一组变量赋值时，一般是这样写： var a = 1; var b = 2; var c = 3; 或者是这样写： var arr = [1, 2, 3]; var a = arr[0]; var b = arr[1]; var c = arr[2]; 现在有了 ES6 之后，我们可以通过数组解构的方式进行赋值：（根据位置进行一一对应） let [a, b, c] = [1, 2, 3]; 二者的效果是一样的，但明显后者的代码更简洁优雅。 ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:2:1","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"未匹配到的情况 数据的结构赋值，是根据位置进行一一对应来赋值的。可如果左边的数量大于右边的数量时（也就是变量的数量大于值的数量时），多余的变量要怎么处理呢？ 答案是：如果变量在一一对应时，没有找到对应的值，那么，多余的变量会被赋值为 undefined。 ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:2:2","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"解构时，左边允许有默认值 在解构赋值时，是允许使用默认值的。举例如下： { //一个变量时 let [foo = true] = []; console.log(foo); //输出结果：true } { //两个变量时 let [a, b] = ['生命壹号']; //a 赋值为：生命壹号。b没有赋值 console.log(a + ',' + b); //输出结果：生命壹号,undefined } { //两个变量时 let [a, b = 'smyhvae'] = ['生命壹号']; //a 赋值为：生命壹号。b 采用默认值 smyhvae console.log(a + ',' + b); //输出结果：生命壹号,smyhvae } ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:2:3","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"将右边的 undefined和null赋值给变量 如果我们在赋值时，采用的是 undefined或者null，那会有什么区别呢？ { let [a, b = 'smyhvae'] = ['生命壹号', undefined]; //b 虽然被赋值为 undefined，但是 b 会采用默认值 console.log(a + ',' + b); //输出结果：生命壹号,smyhvae } { let [a, b = 'smyhvae'] = ['生命壹号', null]; //b 被赋值为 null console.log(a + ',' + b); //输出结果：生命壹号,null } 上方代码分析： undefined：相当于什么都没有，此时 b 采用默认值。 null：相当于有值，但值为 null。 ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:2:4","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"对象的解构赋值 对象的结构赋值：将对象中的值按照属性匹配的方式提取出来，然后赋值给变量。 ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:3:0","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"语法 在 ES6 之前，我们从接口拿到 json 数据后，一般这么赋值： var name = json.name; var age = json.age; var sex = json.sex; 上面这种写法，过于麻烦了。 现在，有了 ES6 之后，我们可以使用对象解构的方式进行赋值。举例如下： const person = { name: 'qianguyihao', age: 28, sex: '男' }; let { name, age, sex } = person; // 对象的结构赋值 console.log(name); // 打印结果：qianguyihao console.log(age); // 打印结果：28 console.log(sex); // 打印结果：男 上方代码可以看出，对象的解构与数组的结构，有一个重要的区别：数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，是根据键来取值的。 ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:3:1","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"未匹配到的情况 对象的结构赋值，是根据属性名进行一一对应来赋值的。可如果左边的数量大于右边的数量时（也就是变量的数量大于值的数量时），多余的变量要怎么处理呢？ 答案是：如果变量在一一对应时，没有找到对应的值，那么，多余的变量会被赋值为 undefined。 ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:3:2","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"给左边的变量自定义命名 对象的结构赋值里，左边的变量名一定要跟右边的属性名保持一致么？答案是不一定。我们可以单独给左边的变量自定义命名。 举例如下： const person = { name: 'qianguyihao', age: 28 }; let { name: myName, age: myAge } = person; // 对象的结构赋值 console.log(myName); // 打印结果：qianguyihao console.log(myAge); // 打印结果：28 console.log(name); // 打印报错：Uncaught ReferenceError: name is not defined console.log(age); // 打印报错：Uncaught ReferenceError: age is not defined 上方的第 2 行代码中：（请牢记） 等号左边的属性名 name、age 是对应等号右边的属性名。 等号左边的 myName、myAge 是左边自定义的变量名。 或者，我们也可以理解为：将右边 name 的值赋值给左边的 myName 变量，将右边 age 的值赋值给左边的 myAge 变量。现在，你应该一目了然了吧？ ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:3:3","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"圆括号的使用 如果变量 foo 在解构之前就已经定义了，此时你再去解构，就会出现问题。下面是错误的代码，编译会报错： let foo = 'haha'; { foo } = { foo: 'smyhvae' }; console.log(foo); 要解决报错，只要在解构的语句外边，加一个圆括号即可： let foo = 'haha'; ({ foo } = { foo: 'smyhvae' }); console.log(foo); //输出结果：smyhvae ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:3:4","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat3"],"content":"字符串解构 字符串也可以解构，这是因为，此时字符串被转换成了一个类似数组的对象。举例如下： const [a, b, c, d] = 'hello'; console.log(a); console.log(b); console.log(c); console.log(typeof a); //输出结果：string 打印结果： h\re\rl\rstring ","date":"2022/11/22","objectID":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/:4:0","tags":null,"title":"变量的解构赋值","uri":"/archives/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC.html/"},{"categories":["cat1"],"content":"前言 ES6 在函数扩展方面，新增了很多特性。例如： 箭头函数 参数默认值 参数结构赋值 剩余参数 扩展运算符 this 绑定 尾调用 今天这篇文章，我们讲一下箭头函数。 ","date":"2022/11/22","objectID":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/:1:0","tags":null,"title":"箭头函数","uri":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/"},{"categories":["cat1"],"content":"箭头函数 ","date":"2022/11/22","objectID":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/:2:0","tags":null,"title":"箭头函数","uri":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/"},{"categories":["cat1"],"content":"定义箭头函数的语法 语法： (参数1, 参数2 ...) =\u003e { 函数体 } 解释： 如果有且仅有 1 个形参，则()可以省略 如果函数体内有且仅有 1 条语句，则{}可以省略，但前提是，这条语句必须是 return 语句。 需要强调的是，箭头函数是没有函数名的，既然如此，那要怎么调用箭头函数呢？你可以将箭头函数赋值给一个变量，通过变量名调用函数；也可以直接使用箭头函数。我们来看看下面的例子。 ","date":"2022/11/22","objectID":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/:2:1","tags":null,"title":"箭头函数","uri":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/"},{"categories":["cat1"],"content":"举例 写法 1、定义和调用函数：（传统写法） function fn1(a, b) { console.log('haha'); return a + b; } console.log(fn1(1, 2)); //输出结果：3 写法 2、定义和调用函数：（ES6 中的写法） const fn2 = (a, b) =\u003e { console.log('haha'); return a + b; }; console.log(fn2(1, 2)); //输出结果：3 上面的两种写法，效果是一样的。 从上面的箭头函数中，我们可以很清晰地看到变量名、参数名、函数体。 另外，箭头函数的写法还可以精简一下，继续往下看。 在箭头函数中，如果方法体内只有一句话，且这句话是 return 语句，那就可以把 {}省略。写法如下： const fn2 = (a, b) =\u003e a + b; console.log(fn2(1, 2)); //输出结果：3 在箭头函数中，如果形参只有一个参数，则可以把()省略。写法如下： const fn2 = (a) =\u003e { console.log('haha'); return a + 1; }; console.log(fn2(1)); //输出结果：2 ","date":"2022/11/22","objectID":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/:2:2","tags":null,"title":"箭头函数","uri":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/"},{"categories":["cat1"],"content":"箭头函数的 this 的指向 箭头函数只是为了让函数写起来更简洁优雅吗？当然不只是这个原因，还有一个很大的作用是与 this 的指向有关。 ES6 之前的普通函数中：this 指向的是函数被调用的对象（也就是说，谁调用了函数，this 就指向谁）。 而 ES6 的箭头函数中：箭头函数本身不绑定 this，this 指向的是箭头函数定义位置的 this（也就是说，箭头函数在哪个位置定义的，this 就跟这个位置的 this 指向相同）。 代码举例： const obj = { name: '千古壹号' }; function fn1() { console.log(this); // 第一个 this return () =\u003e { console.log(this); // 第二个 this }; } const fn2 = fn1.call(obj); fn2(); 打印结果： obj\robj 代码解释：（一定要好好理解下面这句话） 上面的代码中，箭头函数是在 fn1()函数里面定义的，所以第二个 this 跟 第一个 this 指向的是同一个位置。又因为，在执行 fn1.call(obj)之后，第一个 this 就指向了 obj，所以第二个 this 也是指向 了 obj。 ","date":"2022/11/22","objectID":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/:3:0","tags":null,"title":"箭头函数","uri":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/"},{"categories":["cat1"],"content":"面试题：箭头函数的 this 指向 代码举例： const name = '许嵩'; const obj = { name: '千古壹号', sayHello: () =\u003e { console.log(this.name); }, }; obj.sayHello(); 上方代码的打印结果是什么？你可能很难想到。 正确答案的打印结果是许嵩。因为 obj 这个对象并不产生作用域， sayHello() 这个箭头函数实际仍然是定义在 window 当中的，所以 这里的 this 指向是 window。 ","date":"2022/11/22","objectID":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/:3:1","tags":null,"title":"箭头函数","uri":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/"},{"categories":["cat1"],"content":"参数默认值 传统写法： function fn(param) { let p = param || 'hello'; console.log(p); } 上方代码中，函数体内的写法是：如果 param 不存在，就用 hello字符串做兜底。这样写比较啰嗦。 ES6 写法：（参数默认值的写法，很简洁） function fn(param = 'hello') { console.log(param); } 在 ES6 中定义方法时，我们可以给方法里的参数加一个默认值（缺省值）： 方法被调用时，如果没有给参数赋值，那就是用默认值； 方法被调用时，如果给参数赋值了新的值，那就用新的值。 如下： var fn2 = (a, b = 5) =\u003e { console.log('haha'); return a + b; }; console.log(fn2(1)); //第二个参数使用默认值 5。输出结果：6 console.log(fn2(1, 8)); //输出结果：9 提醒 1：默认值的后面，不能再有没有默认值的变量。比如(a,b,c)这三个参数，如果我给 b 设置了默认值，那么就一定要给 c 设置默认值。 提醒 2： 我们来看下面这段代码： let x = 'smyh'; function fn(x, y = x) { console.log(x, y); } fn('vae'); 注意第二行代码，我们给 y 赋值为x，这里的x是括号里的第一个参数，并不是第一行代码里定义的x。打印结果：vae vae。 如果我把第一个参数改一下，改成： let x = 'smyh'; function fn(z, y = x) { console.log(z, y); } fn('vae'); 此时打印结果是：vae smyh。 ","date":"2022/11/22","objectID":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/:4:0","tags":null,"title":"箭头函数","uri":"/archives/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0.html/"},{"categories":null,"content":"Set 数据结构 ","date":"2022/11/22","objectID":"/archives/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html/:1:0","tags":null,"title":"内置对象扩展：set数据结构","uri":"/archives/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html/"},{"categories":null,"content":"Set 数据结构的介绍 ES6 提供了 新的数据结构 Set。Set 类似于数组，但成员的值都是唯一的，没有重复的值。 Set 的应用有很多。比如，在 H5 页面的搜索功能里，用户可能会多次搜索重复的关键字；但是在数据存储上，不需要存储重复的关键字。此时，我们就可以用 Set 来存储用户的搜索记录，Set 内部会自动判断值是否重复，如果重复，则不会进行存储，十分方便。 ","date":"2022/11/22","objectID":"/archives/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html/:1:1","tags":null,"title":"内置对象扩展：set数据结构","uri":"/archives/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html/"},{"categories":null,"content":"生成 Set 数据结构 Set 本身就是一个构造函数，可通过 new Set() 生成一个 Set 的实例。 举例 1： const set1 = new Set(); console.log(set1.size); // 打印结果：0 举例 2、可以接收一个数组作为参数，实现数组去重： const set2 = new Set(['张三', '李四', '王五', '张三']); // 注意，这个数组里有重复的值 // 注意，这里的 set2 并不是数组，而是一个单纯的 Set 数据结构 console.log(set2); // {\"张三\", \"李四\", \"王五\"} // 通过扩展运算符，拿到 set 中的元素（用逗号分隔的序列） // ...set2 // \"张三\", \"李四\", \"王五\" // 注意，到这一步，才获取到了真正的数组 console.log([...set2]); // [\"张三\", \"李四\", \"王五\"] 注意上方的第一行代码，虽然参数里传递的是数组结构，但拿到的 set2 不是数组结构，而是 Set 结构，而且里面元素是去重了的。通过 [...set2]就可以拿到set2对应的数组。 ","date":"2022/11/22","objectID":"/archives/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html/:1:2","tags":null,"title":"内置对象扩展：set数据结构","uri":"/archives/%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html/"},{"categories":null,"content":"剩余参数 剩余参数允许我们将不确定数量的剩余的元素放到一个数组中。 比如说，当函数的实参个数大于形参个数时，我们可以将剩余的实参放到一个数组中。 传统写法： ES5 中，在定义方法时，参数要确定个数，如下：（程序会报错） function fn(a, b, c) { console.log(a); console.log(b); console.log(c); console.log(d); } fn(1, 2, 3); 上方代码中，因为方法的参数是三个，但使用时是用到了四个参数，所以会报错： ES6 写法： ES6 中，我们有了剩余参数，就不用担心报错的问题了。代码可以这样写： const fn = (...args) =\u003e { //当不确定方法的参数时，可以使用剩余参数 console.log(args[0]); console.log(args[1]); console.log(args[2]); console.log(args[3]); }; fn(1, 2); fn(1, 2, 3); //方法的定义中了四个参数，但调用函数时只使用了三个参数，ES6 中并不会报错。 打印结果： 1 2 undefined undefined 1 2 3 undefined 上方代码中注意，args 参数之后，不能再加别的参数，否则编译报错。 下面这段代码，也是利用到了剩余参数： function fn1(first, ...args) { console.log(first); // 10 console.log(args); // 数组：[20, 30] } fn1(10, 20, 30); ","date":"2022/11/22","objectID":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/:1:0","tags":null,"title":"剩余参数和扩展运算符","uri":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/"},{"categories":null,"content":"剩余参数的举例：参数求和 代码举例： const sum = (...args) =\u003e { let total = 0; args.forEach(item =\u003e total += item); // 注意 forEach里面的代码，写得 很精简 return total; }; console.log(sum(10, 20, 30)); 打印结果：60 ","date":"2022/11/22","objectID":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/:1:1","tags":null,"title":"剩余参数和扩展运算符","uri":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/"},{"categories":null,"content":"剩余参数和解构赋值配合使用 代码举例： const students = ['张三', '李四', '王五']; let [s1, ...s2] = students; console.log(s1); // '张三' console.log(s2); // ['李四', '王五'] ","date":"2022/11/22","objectID":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/:1:2","tags":null,"title":"剩余参数和扩展运算符","uri":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/"},{"categories":null,"content":"扩展运算符（展开语法） 扩展运算符和剩余参数是相反的。 剩余参数是将剩余的元素放到一个数组中；而扩展运算符是将数组或者对象拆分成逗号分隔的参数序列。 代码举例： const arr = [10, 20, 30]; ...arr // 10, 20, 30 注意，这一行是伪代码，这里用到了扩展运算符 console.log(...arr); // 10 20 30 console.log(10, 20, 30); // 10 20 30 上面的代码要仔细看： arr是一个数组，而...arr则表示10, 20, 30这样的序列。 我们把...arr 打印出来，发现打印结果竟然是 10 20 30，为啥逗号不见了呢？因为逗号被当作了 console.log 的参数分隔符。如果你不信，可以直接打印 console.log(10, 20, 30) 看看。 接下来，我们看一下扩展运算符的应用。 ","date":"2022/11/22","objectID":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/:2:0","tags":null,"title":"剩余参数和扩展运算符","uri":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/"},{"categories":null,"content":"举例1：数组赋值 数组赋值的代码举例： let arr2 = [...arr1]; // 将 arr1 赋值给 arr2 为了理解上面这行代码，我们先来分析一段代码：（将数组 arr1 赋值给 arr2） let arr1 = ['www', 'smyhvae', 'com']; let arr2 = arr1; // 将 arr1 赋值给 arr2，其实是让 arr2 指向 arr1 的内存地址 console.log('arr1:' + arr1); console.log('arr2:' + arr2); console.log('---------------------'); arr2.push('你懂得'); //往 arr2 里添加一部分内容 console.log('arr1:' + arr1); console.log('arr2:' + arr2); 运行结果： 上方代码中，我们往往 arr2 里添加了你懂的，却发现，arr1 里也有这个内容。原因是：let arr2 = arr1;其实是让 arr2 指向 arr1 的地址。也就是说，二者指向的是同一个内存地址。 如果不想让 arr1 和 arr2 指向同一个内存地址，我们可以借助扩展运算符来做： let arr1 = ['www', 'smyhvae', 'com']; let arr2 = [...arr1]; //【重要代码】arr2 会重新开辟内存地址 console.log('arr1:' + arr1); console.log('arr2:' + arr2); console.log('---------------------'); arr2.push('你懂得'); //往arr2 里添加一部分内容 console.log('arr1:' + arr1); console.log('arr2:' + arr2); 运行结果： arr1:www,smyhvae,com arr2:www,smyhvae,com --------------------- arr1:www,smyhvae,com arr2:www,smyhvae,com,你懂得 我们明白了这个例子，就可以避免开发中的很多业务逻辑上的 bug。 ","date":"2022/11/22","objectID":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/:2:1","tags":null,"title":"剩余参数和扩展运算符","uri":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/"},{"categories":null,"content":"举例2：合并数组 代码举例： let arr1 = ['王一', '王二', '王三']; let arr2 = ['王四', '王五', '王六']; // ...arr1 // '王一','王二','王三' // ...arr2 // '王四','王五','王六' // 方法1 let arr3 = [...arr1, ...arr2]; console.log(arr3); // [\"王一\", \"王二\", \"王三\", \"王四\", \"王五\", \"王六\"] // 方法2 arr1.push(...arr2); console.log(arr1); // [\"王一\", \"王二\", \"王三\", \"王四\", \"王五\", \"王六\"] ","date":"2022/11/22","objectID":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/:2:2","tags":null,"title":"剩余参数和扩展运算符","uri":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/"},{"categories":null,"content":"举例3：将伪数组或者可遍历对象转换为真正的数组 代码举例： const myDivs = document.getElementsByClassName('div'); const divArr = [...myDivs]; // 利用扩展运算符，将伪数组转为真正的数组 补充： 我们在《JavaScript基础/数组的常见方法》中也学过，还有一种方式，可以将伪数组（或者可遍历对象）转换为真正的数组。语法格式如下： let arr2 = Array.from(arrayLike); ","date":"2022/11/22","objectID":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/:2:3","tags":null,"title":"剩余参数和扩展运算符","uri":"/archives/%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6.html/"},{"categories":null,"content":"字符串的扩展 下面提到的字符串的几个方法，更详细的内容，可以看《04-JavaScript 基础/内置对象 String：字符串的常见方法.md》。 ES6 中的字符串扩展如下： includes(str)：判断是否包含指定的字符串 startsWith(str)：判断是否以指定字符串开头 endsWith(str)：判断是否以指定字符串结尾 repeat(count)：重复指定次数 举例如下： let str = 'abcdefg'; console.log(str.includes('a')); //true console.log(str.includes('h')); //false //startsWith(str) : 判断是否以指定字符串开头 console.log(str.startsWith('a')); //true console.log(str.startsWith('d')); //false //endsWith(str) : 判断是否以指定字符串结尾 console.log(str.endsWith('g')); //true console.log(str.endsWith('d')); //false //repeat(count) : 重复指定次数a console.log(str.repeat(5)); 打印结果： ","date":"2022/11/22","objectID":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/:1:0","tags":null,"title":"字符串、数组、对象的扩展","uri":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/"},{"categories":null,"content":"Number 的扩展 二进制与八进制数值表示法: 二进制用0b, 八进制用0o。 举例： console.log(0b1010); //10 console.log(0o56); //46 Number.isFinite(i)：判断是否为有限大的数。比如Infinity这种无穷大的数，返回的就是 false。 Number.isNaN(i)：判断是否为 NaN。 Number.isInteger(i)：判断是否为整数。 Number.parseInt(str)：将字符串转换为对应的数值。 Math.trunc(i)：去除小数部分。 举例： //Number.isFinite(i) : 判断是否是有限大的数 console.log(Number.isFinite(NaN)); //false console.log(Number.isFinite(5)); //true console.log(Number.isFinite(Infinity)); //false //Number.isNaN(i) : 判断是否是NaN console.log(Number.isNaN(NaN)); //true console.log(Number.isNaN(5)); //falsse //Number.isInteger(i) : 判断是否是整数 console.log(Number.isInteger(5.23)); //false console.log(Number.isInteger(5.0)); //true console.log(Number.isInteger(5)); //true //Number.parseInt(str) : 将字符串转换为对应的数值 console.log(Number.parseInt('123abc')); //123 console.log(Number.parseInt('a123abc')); //NaN // Math.trunc(i) : 直接去除小数部分 console.log(Math.trunc(13.123)); //13 ","date":"2022/11/22","objectID":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/:2:0","tags":null,"title":"字符串、数组、对象的扩展","uri":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/"},{"categories":null,"content":"数组的扩展 下面提到的数组的几个方法，更详细的内容，可以看《04-JavaScript 基础/数组的常见方法.md》。 Array.from() find() findIndex() ","date":"2022/11/22","objectID":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/:3:0","tags":null,"title":"字符串、数组、对象的扩展","uri":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/"},{"categories":null,"content":"对象的扩展 ","date":"2022/11/22","objectID":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/:4:0","tags":null,"title":"字符串、数组、对象的扩展","uri":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/"},{"categories":null,"content":"扩展 1 Object.is(v1, v2); 作用：判断两个数据是否完全相等。底层是通过字符串来判断的。 我们先来看下面这两行代码的打印结果： console.log(0 == -0); console.log(NaN == NaN); 打印结果： true\rfalse 上方代码中，第一行代码的打印结果为 true，这个很好理解。第二行代码的打印结果为 false，因为 NaN 和任何值都不相等。 但是，如果换成下面这种方式来比较： console.log(Object.is(0, -0)); console.log(Object.is(NaN, NaN)); 打印结果却是： false true 代码解释：还是刚刚说的那样，Object.is(v1, v2)比较的是字符串是否相等。 ","date":"2022/11/22","objectID":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/:4:1","tags":null,"title":"字符串、数组、对象的扩展","uri":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/"},{"categories":null,"content":"Object.assign() Object.assign() 在实战开发中，使用到的频率非常高，一定要重视。关于它的内容，详见《04-JavaScript 基础/浅拷贝和深拷贝.md》。 ","date":"2022/11/22","objectID":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/:4:2","tags":null,"title":"字符串、数组、对象的扩展","uri":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/"},{"categories":null,"content":"扩展 3：__proto__属性 举例： let obj1 = { name: 'smyhvae' }; let obj2 = {}; obj2.__proto__ = obj1; console.log(obj1); console.log(obj2); console.log(obj2.name); 打印结果： 上方代码中，obj2 本身是没有属性的，但是通过__proto__属性和 obj1 产生关联，于是就可以获得 obj1 里的属性。 ","date":"2022/11/22","objectID":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/:4:3","tags":null,"title":"字符串、数组、对象的扩展","uri":"/archives/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95.html/"},{"categories":null,"content":"个人说明 Hello，欢迎光临！ 这里是吕思均的个人博客 记录生活、工作中某些时刻的所思所想，不定时更新！ ✨2023，面朝大海，春暖花开！。 –2022.12 Github: https://github.com/bablvsj E-mail: bablvsj@163.com ","date":"0001/01/01","objectID":"/about/:0:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"博客日志 2022-12-24: 引用hugo主体 LoveIt 2022-12-16: 网站参考子舒的博客部分内容 2022-12-15: 引用hugo主题 hugo-theme-Reader 2022-12-10: 博客使用hugo构建。 ","date":"0001/01/01","objectID":"/about/:0:2","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"友情链接 一些文章写的不错的博主 涛叔 江卮可乐 梦繁星 依然 王宜楷工作室 随望淡思 叶开楗博客 东东博客 涓滴意念汇成河 南弦 SharpG.的博客 碗里有肉丝 Java码农博客 推荐网站 版权声明：网站文章所有版权如无特殊说明，均归本人所有。允许转载，标明出处即可。 ","date":"0001/01/01","objectID":"/about/:0:3","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"记录我订阅的周刊，质量不错，内容挺有意思。如果你有推荐，欢迎在评论区分享。 (以下排名不分先后，仅以记录的先后顺序。) ","date":"0001/01/01","objectID":"/weekly/:0:0","tags":null,"title":"周刊","uri":"/weekly/"},{"categories":null,"content":"周刊 1. DecoHack周刊 https://decohack.zhubai.love/ 为独立创造者提供独立见解，帮助你发现新产品方向，启动和完善你的项目。 2. 好工具周刊 https://bestxtools.zhubai.love/ 发现并分享有趣，有创意，免费、好用的工具，每周四发布。 3. 老胡的周刊 https://weekly.howie6879.cn/ 每周记录看到的有价值的信息，主要针对计算机领域，内容主题极大程度被我个人喜好主导。这个项目核心目的在于记录让自己有印象的信息做一个留存以及共享。 4. 前段精读周刊 https://github.com/ascoders/weekly 前端界的好文精读，每周更新。 5. 科技爱好者周刊-阮一峰 https://github.com/ruanyf/weekly 记录每周值得分享的科技内容，周五发布。 6. 开发者简报 https://dev.com.cn/ 每周为你轻解读技术创业🚀、酷产品📱、编程语言👨‍💻、开发工具🛠️…等内容 ","date":"0001/01/01","objectID":"/weekly/:0:1","tags":null,"title":"周刊","uri":"/weekly/"},{"categories":null,"content":"月刊 hellogithub - https://hellogithub.com/ 每月28号发布 ","date":"0001/01/01","objectID":"/weekly/:0:2","tags":null,"title":"周刊","uri":"/weekly/"},{"categories":null,"content":"播客 枫言枫语 https://fyfy.fm/ 听见科技与人文的声音 一档由开发者 @枫影JustinYan 和设计师 @自力hzlzh 主持的播客节目。 ","date":"0001/01/01","objectID":"/weekly/:0:3","tags":null,"title":"周刊","uri":"/weekly/"}]