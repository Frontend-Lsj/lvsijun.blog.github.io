<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Node on Bablvsj&#39;s Blog</title>
    <link>https://bablvsj.github.io/tags/node/</link>
    <description>Recent content in Node on Bablvsj&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 Apr 2020 17:11:35 +0800</lastBuildDate><atom:link href="https://bablvsj.github.io/tags/node/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>egg.js</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/egg.js/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/egg.js/</guid>
      <description>egg-sequelize 连接多个数据库如何配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 config.sequelize = { datasources: [ { delegate: &amp;#39;model&amp;#39;, // 加载所有的模型到 app.model and ctx.model baseDir:</description>
    </item>
    
    <item>
      <title>01-Node.js介绍</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/01-node.js%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/01-node.js%E4%BB%8B%E7%BB%8D/</guid>
      <description>todo rpc 和 Node.js 的关系 《吊打面试官》系列 Node.js 全栈秒杀系统 前言 Node 的重要性已经不言而喻，很多互联网公司都已经有大量的高性能系统运行在 Node 之上。Node 凭借其</description>
    </item>
    
    <item>
      <title>02-Node.js的特点</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/02-node.js%E7%9A%84%E7%89%B9%E7%82%B9/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/02-node.js%E7%9A%84%E7%89%B9%E7%82%B9/</guid>
      <description>Node.js 的特点 异步、非阻塞 IO 模型 事件循环 单线程 总结：轻量和高效 Node.js 的性能和效率非常高。 传统的 Java 语言是一个请求开启一个线程，当请求处理完毕后就关闭这个</description>
    </item>
    
    <item>
      <title>03-Node.js开发环境安装</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/03-node.js%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/03-node.js%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</guid>
      <description>Node.js 运行环境配置：通过 Node.js 安装包（不推荐） 去 Node.js 的官网下载安装包： 我们也可以在https://nodejs.org/en/download/rel</description>
    </item>
    
    <item>
      <title>04-Node.js模块化规范：CommonJS</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/04-node.js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83commonjs/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/04-node.js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83commonjs/</guid>
      <description>前言 网站越来越复杂，js代码、js文件也越来越多，会遇到一些问题： 文件依赖 全局污染、命名冲突 程序模块化包括： 日期模块 数学计算模块 日志模块 登陆</description>
    </item>
    
    <item>
      <title>05-Node.js内置模块：fs文件模块</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/05-node.js%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97fs%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/05-node.js%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97fs%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
      <description>Node.js 的官方API文档 Node.js 的API文档（英文）： https://nodejs.org/docs/latest-v8.x/api/index.html Node.js 的API文档（中文）：http://nodejs.cn/api/ 关于 Node.js 的内置模块和常见API，</description>
    </item>
    
    <item>
      <title>06-Node.js内置模块：path路径模块</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/06-node.js%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97path%E8%B7%AF%E5%BE%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/06-node.js%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97path%E8%B7%AF%E5%BE%84%E6%A8%A1%E5%9D%97/</guid>
      <description>path 路径模块 Node.js 通过path这个内置模块，提供了一些路径操作的API，具体可以参考官方的api文档。这里列举一些常用的API。 path.extname() 获取文件/路径的</description>
    </item>
    
    <item>
      <title>07-Node.js操作MySQL数据库</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/07-node.js%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/07-node.js%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>Node.js 连接 MySQL （1）安装 mysql 包： 1 $ npm install mysql （2）引入 mysql 包： 1 const mysql = require(&amp;#34;mysql&amp;#34;); （3）建立连接： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 let mysql = require(&amp;#34;mysql&amp;#34;); let options = { host: &amp;#34;localhost&amp;#34;, //port:&amp;#34;3306&amp;#34;,</description>
    </item>
    
    <item>
      <title>CommonJS</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/commonjs/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/commonjs/</guid>
      <description>全局对象 global 类似于客户端 JavaScript 运行环境中的 window。 process 用于获取当前的 Node 进程信息，一般用于获取环境变量之类的信息。 console Node 中内置的 console 模块，提供操作控</description>
    </item>
    
    <item>
      <title>JavaScript模块化：AMD</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96amd/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96amd/</guid>
      <description>AMD的基本语法 AMD的概念 AMD（Asynchronous Module Definition）：异步模块定义。AMD专门用于浏览器端，模块的加载是异步</description>
    </item>
    
    <item>
      <title>JavaScript模块化：CMD</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96cmd/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96cmd/</guid>
      <description>CMD的基本语法 CMD的概念 CMD（Common Module Definition）：同步模块定义。CMD专门用于浏览器端，模块的加载是同步的。模块在使</description>
    </item>
    
    <item>
      <title>JavaScript模块化：ES6</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96es6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96es6/</guid>
      <description>模块化开发的引入 JS开发的弊端 JS 在使用时存在两大问题，而 Node.js 可以很好地避免这两个问题： 文件依赖。比如 a 文件依赖 b 文件，b 文件依赖 c 文件。而 Node.js 中</description>
    </item>
    
    <item>
      <title>Node.js代码举例</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/node.js%E4%BB%A3%E7%A0%81%E4%B8%BE%E4%BE%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/node.js%E4%BB%A3%E7%A0%81%E4%B8%BE%E4%BE%8B/</guid>
      <description>在 Node.js 上建一个 http 服务器 （1）新建一个文件 server01.js，然后在里面输入如下代码： 1 2 3 4 5 6 7 8 9 10 const http = require(&amp;#39;http&amp;#39;); //引入 node.js里面</description>
    </item>
    
    <item>
      <title>WebSocket</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/websocket/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/websocket/</guid>
      <description>WebSocket 的引入 背景分析 HTTP协议是无状态的，服务器只会响应来自客户端的请求，但是它与客户端之间不具备持续连接。 当用户在浏览器上进行操作时，可以请</description>
    </item>
    
    <item>
      <title>事件驱动和非阻塞机制</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%9C%BA%E5%88%B6/</guid>
      <description>异步编程 异步操作 Node 采用 Chrome V8 引擎处理 JavaScript 脚本。V8 最大特点就是单线程运行，一次只能运行一个任务。 Node 大量采用异步操作（asynchronous op</description>
    </item>
    
    <item>
      <title>egg.js</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/egg.js-1/</link>
      <pubDate>Fri, 01 Nov 2019 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/egg.js-1/</guid>
      <description>egg-sequelize 连接多个数据库如何配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 config.sequelize = { datasources: [ { delegate: &amp;#39;model&amp;#39;, // 加载所有的模型到 app.model and ctx.model baseDir:</description>
    </item>
    
  </channel>
</rss>
