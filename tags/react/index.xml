<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>React on Bablvsj&#39;s Blog</title>
    <link>https://bablvsj.github.io/tags/react/</link>
    <description>Recent content in React on Bablvsj&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 Jan 2020 17:11:35 +0800</lastBuildDate><atom:link href="https://bablvsj.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01-React介绍</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/01-react%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/01-react%E4%BB%8B%E7%BB%8D/</guid>
      <description>虚拟DOM和diff算法 在学习 React 之前，我们需要先了解两个概念：虚拟DOM、diff算法。 虚拟DOM 问题描述： 假设我们的数据发生一点点的变化，</description>
    </item>
    
    <item>
      <title>02-JSX语法介绍</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/02-jsx%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/02-jsx%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>JSX介绍 JSX的引入 如果直接让用户通过 JS 代码手动创建DOM元素，肯定是非常麻烦的。 于是，React 官方就提出了一套 JSX 语法规范，能够让我们在</description>
    </item>
    
    <item>
      <title>03-React组件（一）：生命周期</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/03-react%E7%BB%84%E4%BB%B6%E4%B8%80%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/03-react%E7%BB%84%E4%BB%B6%E4%B8%80%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>组件的生命周期 在组件创建、到加载到页面上运行、以及组件被销毁的过程中，总是伴随着各种各样的事件，这些在组件特定时期，触发的事件统称为组件的生</description>
    </item>
    
    <item>
      <title>04-React组件（二）：常见属性和函数</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/04-react%E7%BB%84%E4%BB%B6%E4%BA%8C%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7%E5%92%8C%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/04-react%E7%BB%84%E4%BB%B6%E4%BA%8C%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7%E5%92%8C%E5%87%BD%E6%95%B0/</guid>
      <description>defaultProps 和 prop-types 使用 defaultProps 设置组件的默认值 React 中，使用静态的 defaultProps 属性，来设置组件的默认属性值。 格式举例： 1 2 3 4 // 在 React 中，使用静态的 defaultProps 属性，来设置组件的默认属</description>
    </item>
    
    <item>
      <title>05-React中绑定this并给函数传参的几种方式</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/05-react%E4%B8%AD%E7%BB%91%E5%AE%9Athis%E5%B9%B6%E7%BB%99%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/05-react%E4%B8%AD%E7%BB%91%E5%AE%9Athis%E5%B9%B6%E7%BB%99%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>前言 我们先来看下面这段代码： components/MyComponent.jsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import React from &amp;#34;react&amp;#34;; export default class MyComponent extends React.Component { constructor(props) { super(props); this.state = { msg: &amp;#34;这是 MyComponent</description>
    </item>
    
    <item>
      <title>06-React的单向数据绑定</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/06-react%E7%9A%84%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/06-react%E7%9A%84%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</guid>
      <description>单项数据绑定 在 Vue 中，可以通过 v-model 指令来实现双向数据绑定。但是，在 React 中并没有指令的概念，而且 React 默认不支持 双向数据绑定。 React 只支持，把数据从 state 上传输</description>
    </item>
    
    <item>
      <title>07-React路由的使用</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/07-react%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/07-react%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>React路由的使用 使用React路由之前，我们需要先安装 react-router-dom这个包。比如： 1 yarn add react-router-dom 代码举例： （1）index.</description>
    </item>
    
    <item>
      <title>10-React Navive初识</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/10-react-navive%E5%88%9D%E8%AF%86/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/10-react-navive%E5%88%9D%E8%AF%86/</guid>
      <description>搭建开发环境 官方文档：https://reactnative.cn/docs/getting-started.html 安装Node、home</description>
    </item>
    
    <item>
      <title>react</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/react/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/react/</guid>
      <description>1、姓名组件 hello lvsijun ! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //组件名称必须以大写字母开头。React 会将以小写字母开头的组件视为原生 DOM 标签 //例如</description>
    </item>
    
  </channel>
</rss>
