<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>前端性能优化 on Bablvsj&#39;s Blog</title>
    <link>https://bablvsj.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in 前端性能优化 on Bablvsj&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 01 Mar 2020 17:11:35 +0800</lastBuildDate><atom:link href="https://bablvsj.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>lazyload&amp;防抖动和节流阀</title>
      <link>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/lazyload%E9%98%B2%E6%8A%96%E5%8A%A8%E5%92%8C%E8%8A%82%E6%B5%81%E9%98%80/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/lazyload%E9%98%B2%E6%8A%96%E5%8A%A8%E5%92%8C%E8%8A%82%E6%B5%81%E9%98%80/</guid>
      <description>lazyload 用的最多的场景是： 图片lazyload 组件lazyload 现在一般都单独做css的lazyload或者js的lazyload，因为这种方式</description>
    </item>
    
    <item>
      <title>前端性能优化认知</title>
      <link>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/00-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%AE%A4%E7%9F%A5/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/00-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%AE%A4%E7%9F%A5/</guid>
      <description>前端性能优化认知 什么是前端性能优化 通常来讲，前端性能优化是指：从用户开始访问网站到整个页面完整地展现出来的过程中，通过各种优化策略和优化方法</description>
    </item>
    
    <item>
      <title>前端性能分析工具和指标</title>
      <link>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/01-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8C%87%E6%A0%87/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/01-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8C%87%E6%A0%87/</guid>
      <description>性能指标和优化目标之：加载 性能指标：我们在性能优化过程中可以参考的标准。这些标准都是业界或者前人总结出来的指导性经验。我们可以参考这些指标，</description>
    </item>
    
    <item>
      <title>浏览器渲染机制</title>
      <link>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</guid>
      <description>前言 渲染机制包括的内容： 什么是DOCTYPE及作用 浏览器渲染过程。面试经常会问：在浏览器中输入url，发生了哪些事情。其中有一部就是浏览器的</description>
    </item>
    
    <item>
      <title>渲染优化</title>
      <link>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03-%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03-%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96/</guid>
      <description>浏览器的渲染机制 我们需要先理解浏览器的渲染经历了哪些过程，才能有针对性的进行相关优化。 掌握浏览器的渲染优化，可以说是前端工程师的一个分水岭。</description>
    </item>
    
    <item>
      <title>静态资源优化</title>
      <link>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/</guid>
      <description>图片格式和应用场景 JPEG 格式 JPEG（Joint Photographic Experts Group）是一种针对彩色照片而广泛使用的有损压缩图形格式，属于位图。 常用文件扩展名为.jp</description>
    </item>
    
    <item>
      <title>页面渲染性能优化</title>
      <link>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/temp/13-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>浏览器渲染过程 浏览器解析 HTML，生成 DOM Tree（Parse HTML）。 浏览器解析 CSS，生成 CSSOM（CSS Object Model）Tree。 JavaScript 会</description>
    </item>
    
  </channel>
</rss>
