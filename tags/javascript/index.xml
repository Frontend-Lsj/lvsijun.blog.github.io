<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JavaScript on Bablvsj&#39;s Blog</title>
    <link>https://bablvsj.github.io/tags/javascript/</link>
    <description>Recent content in JavaScript on Bablvsj&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 09 Aug 2023 14:55:19 +0800</lastBuildDate><atom:link href="https://bablvsj.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>你不知道的JavaScript-上</title>
      <link>https://bablvsj.github.io/posts/tech/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript-%E4%B8%8A/</link>
      <pubDate>Wed, 09 Aug 2023 14:55:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript-%E4%B8%8A/</guid>
      <description>作用域和闭包 第1章 作用域是什么 1.1 编译原理 传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为“编译”。 分词/词法分析（T</description>
    </item>
    
    <item>
      <title>02-数据的赋值</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/02-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%B5%8B%E5%80%BC/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/02-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%B5%8B%E5%80%BC/</guid>
      <description>对象赋值 用 Object.assgin() 实现浅拷贝 代码举例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const obj1 = { name: &amp;#39;qianguyihao&amp;#39;, age: 28, desc: &amp;#39;hello world&amp;#39;, }; const obj2 = { name: &amp;#39;许嵩&amp;#39;, sex: &amp;#39;男&amp;#</description>
    </item>
    
    <item>
      <title>03-变量的数据类型：基本数据类型和引用数据类型</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/03-%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/03-%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>变量的数据类型 为什么需要数据类型 在计算机中，不同的数据所需占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型。而且，不同的数</description>
    </item>
    
    <item>
      <title>06-ES6：箭头函数</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/06-es6%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/06-es6%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>箭头函数 定义箭头函数的语法 语法： 1 (参数1, 参数2 ...) =&amp;gt; { 函数体 } 解释： 如果有且仅有 1 个形参，则()可以省略 如果函数体内有且仅有 1 条语句，则{</description>
    </item>
    
    <item>
      <title>07-typeof和数据类型转换</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/07-typeof%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/07-typeof%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>前言 变量的数据类型转换：将一种数据类型转换为另外一种数据类型。 通常有三种形式的类型转换： 转换为字符串类型 转换为数字型 转换为布尔型 你会专门把某</description>
    </item>
    
    <item>
      <title>07-剩余参数和扩展运算符</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/07-%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/07-%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>剩余参数 剩余参数允许我们将不确定数量的剩余的元素放到一个数组中。 比如说，当函数的实参个数大于形参个数时，我们可以将剩余的实参放到一个数组中。</description>
    </item>
    
    <item>
      <title>08-字符串、数组、对象的扩展</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/08-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/08-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>字符串的扩展 下面提到的字符串的几个方法，更详细的内容，可以看《04-JavaScript 基础/内置对象 String：字符串的常见方法.md》</description>
    </item>
    
    <item>
      <title>08-运算符</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/08-%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/08-%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>我们在本文件夹的第 02 篇里讲到了JS中变量的概念，本篇文章讲一下运算符和表达式。 运算符的定义和分类 运算符的定义 运算符：也叫操作符，是一种符号。</description>
    </item>
    
    <item>
      <title>09-内置对象扩展：Set数据结构</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/09-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/09-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>Set 数据结构 Set 数据结构的介绍 ES6 提供了 新的数据结构 Set。Set 类似于数组，但成员的值都是唯一的，没有重复的值。 Set 的应用有很多。比如，在 H5 页面的</description>
    </item>
    
    <item>
      <title>09-流程控制语句：选择结构（if和switch）</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/09-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84if%E5%92%8Cswitch/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/09-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84if%E5%92%8Cswitch/</guid>
      <description>代码块 用{}包围起来的代码，就是代码块。 在 ES5 语法中，代码块，只具有分组的作用，没有其他的用途。代码块中的内容，在外部是完全可见的。举例： 1 2</description>
    </item>
    
    <item>
      <title>10-Promise入门详解</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/10-promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/10-promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>前言：异步和回调 异步 JavaScript 的执行环境是单线程。 所谓单线程，是指 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，也就是一次只能完成一项任务，这个任务执</description>
    </item>
    
    <item>
      <title>10-流程控制语句：循环结构（for和while）</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/10-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84for%E5%92%8Cwhile/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/10-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84for%E5%92%8Cwhile/</guid>
      <description>前言 循环语句：通过循环语句可以反复的执行一段代码多次。 for 循环 for 循环的语法 语法： 1 2 3 for(①初始化表达式; ②条件表达式; ④更新表达式){ ③</description>
    </item>
    
    <item>
      <title>11-Promise的常见用法和API</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/11-promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E5%92%8Capi/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/11-promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E5%92%8Capi/</guid>
      <description>链式调用：基于 Promise 处理多次 Ajax 请求【重要】 实际开发中，我们经常需要同时请求多个接口。比如说：在请求完接口1的数据data1之后，需要根据data</description>
    </item>
    
    <item>
      <title>11-对象简介</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/11-%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/11-%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B/</guid>
      <description>对象简介 面向对象简介 面向对象：可以创建自定义的类型，很好的支持继承和多态。 面向对象的特征：封装、继承、多态。 对象的概念 在 JavaScript 中，对象是一组无序</description>
    </item>
    
    <item>
      <title>12-ES7：async函数详解</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/12-es7async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/12-es7async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid>
      <description>备注： async/await 的内容还有待完善。 async/await （异步函数）概述 async/await 是在 ES7 中引入的新语法，可以更加方便地进行异步操作。 本质： Generator 的语法糖。 async 的返回值是 Promise 实例对象。 await</description>
    </item>
    
    <item>
      <title>12-基本包装类型</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/12-%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/12-%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/</guid>
      <description>基本数据类型不能绑定属性和方法 属性和方法只能添加给对象，不能添加给基本数据类型。 1、基本数据类型： 注意，基本数据类型string是无法绑定属</description>
    </item>
    
    <item>
      <title>13-内置对象 String：字符串的常见方法</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/13-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1-string%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/13-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1-string%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</guid>
      <description>内置对象简介 JavaScript 中的对象分为3种：自定义对象 、内置对象、 浏览器对象。 前面两种对象：是JS的基础内容，属于 ECMAScript； 第三个浏览器对象</description>
    </item>
    
    <item>
      <title>14-内置对象：Number和Math</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/14-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1number%E5%92%8Cmath/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/14-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1number%E5%92%8Cmath/</guid>
      <description>内置对象 Number 的常见方法 Number.isInteger() 判断是否为整数 语法： 1 布尔值 = Number.isInteger(数字); toFixed() 小数点后面保留多少位 语法： 1 字符串 = myNum.toFixed(num); 解释：</description>
    </item>
    
    <item>
      <title>15-内置对象：Date</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/15-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1date/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/15-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1date/</guid>
      <description>内置对象：Date Date 对象在实际开发中，使用得很频繁，且容易在细节地方出错，需要引起重视。 内置对象 Date 用来处理日期和时间。 需要注意的是：与 Math 对象</description>
    </item>
    
    <item>
      <title>16-数组简介</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/16-%E6%95%B0%E7%BB%84%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/16-%E6%95%B0%E7%BB%84%E7%AE%80%E4%BB%8B/</guid>
      <description>之前学习的数据类型，只能存储一个值（字符串也为一个值）。如果我们想存储多个值，就可以使用数组。 数组简介 数组（Array）是属于内置对象，我们</description>
    </item>
    
    <item>
      <title>17-数组的常见方法</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/17-%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/17-%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</guid>
      <description>数组的方法清单 数组的类型相关 方法 描述 备注 Array.isArray() 判断是否为数组 toString() 将数组转换为字符串 Array.from(arrayLike) 将伪数组转化为真数组 Array.of(value1, value2, value3) 创建数组：将一系列值转换成数组 注意，</description>
    </item>
    
    <item>
      <title>18-函数</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/18-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/18-%E5%87%BD%E6%95%B0/</guid>
      <description>前言 关于函数的核心内容： 函数有哪几种定义和调用方式 this：函数内部的 this 指向、如何改变 this 的指向。 函数的严格模式 高阶函数：函数作为参数传递、函</description>
    </item>
    
    <item>
      <title>19-作用域和变量提升</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/19-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/19-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</guid>
      <description>作用域、变量提升的知识点，面试时会经常遇到。 作用域（Scope）的概念 概念：通俗来讲，作用域是一个变量或函数的作用范围。作用域在函数定义时，</description>
    </item>
    
    <item>
      <title>20-预编译</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/20-%E9%A2%84%E7%BC%96%E8%AF%91/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/20-%E9%A2%84%E7%BC%96%E8%AF%91/</guid>
      <description>我们在上一篇文章《作用域》中简单讲过“变量提升”，今天来讲一下预编译，这对我们深入理解变量提升会有帮助。 JavaScript 运行三部曲 语法分析 预编译 解释执行 预</description>
    </item>
    
    <item>
      <title>21-this指向</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/21-this%E6%8C%87%E5%90%91/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/21-this%E6%8C%87%E5%90%91/</guid>
      <description>执行期上下文 当函数执行时（准确来说，是在函数发生预编译的前一刻），会创建一个执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环</description>
    </item>
    
    <item>
      <title>22-call、apply 和 bind</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/22-callapply-%E5%92%8C-bind/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/22-callapply-%E5%92%8C-bind/</guid>
      <description>前言 JS 专门为我们提供了一些方法来改变函数内部的 this 指向。常见的方法有 call()、apply()、bind() 方法。 call() 方法 call() 方法的作用 call() 方法的</description>
    </item>
    
    <item>
      <title>23-高阶函数</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/23-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/23-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
      <description>高阶函数 高阶函数的概念 当 函数 A 接收函数 B 作为参数，或者把函数 C 作为返回值输出时，我们称 函数 A 为高阶函数。 通俗来说，高阶函数是 对其他函数进行操</description>
    </item>
    
    <item>
      <title>24-闭包</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/24-%E9%97%AD%E5%8C%85/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/24-%E9%97%AD%E5%8C%85/</guid>
      <description>闭包的引入 我们知道，变量根据作用域的不同分为两种：全局变量和局部变量。 函数内部可以访问全局变量和局部变量。 函数外部只能访问全局变量，不能访问</description>
    </item>
    
    <item>
      <title>25-面向对象概述</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/25-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/25-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0/</guid>
      <description>面向过程和面向对象 面向过程 面向过程：先分析好的具体步骤，然后按照步骤，一步步解决问题。 优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例</description>
    </item>
    
    <item>
      <title>26-对象的创建&amp;构造函数</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/26-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/26-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</guid>
      <description>在看本文之前，可以先复习前面的一篇文章：《04-JavaScript 基础/11-对象简介.md》 创建自定义对象的几种方法 方式一：对象字面量 对</description>
    </item>
    
    <item>
      <title>27-对象的基本操作</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/27-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/27-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>对象的基本操作 创建对象 使用 new 关键字调用的函数，是构造函数 constructor。构造函数是专门用来创建对象的函数。 例如： 1 var obj = new Object(); 记住，使</description>
    </item>
    
    <item>
      <title>28-浅拷贝和深拷贝</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/28-%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/28-%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</guid>
      <description>概念 浅拷贝：只拷贝最外面一层的数据；更深层次的对象，只拷贝引用。 深拷贝：拷贝多层数据；每一层级别的数据都会拷贝。 总结： 拷贝引用的时候，是属于</description>
    </item>
    
    <item>
      <title>29-对象的高级操作（待更新）</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/29-%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C%E5%BE%85%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/29-%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C%E5%BE%85%E6%9B%B4%E6%96%B0/</guid>
      <description>Object.freeze() 冻结对象 Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对</description>
    </item>
    
    <item>
      <title>30-原型链和原型继承（待更新）</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/30-%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%BE%85%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/30-%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%BE%85%E6%9B%B4%E6%96%B0/</guid>
      <description>前言 在 ES6 中，我们可以通过 ES6 引入的类 Class 来实现面向对象的编程（下一篇文章会讲到）。但是在 ES6 之前，我们是通过构造函数和原型，来模拟类的实现机制。 今</description>
    </item>
    
    <item>
      <title>31-类和构造继承（待更新）</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/31-%E7%B1%BB%E5%92%8C%E6%9E%84%E9%80%A0%E7%BB%A7%E6%89%BF%E5%BE%85%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/31-%E7%B1%BB%E5%92%8C%E6%9E%84%E9%80%A0%E7%BB%A7%E6%89%BF%E5%BE%85%E6%9B%B4%E6%96%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>32-正则表达式</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/32-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/32-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>正则表达式简介 定义：正则表达式用于定义一些字符串的规则。 作用：计算机可以根据正则表达式，来检查一个字符串是否符合指定的规则；或者将字符串中符</description>
    </item>
    
    <item>
      <title>33-事件简介</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/33-%E4%BA%8B%E4%BB%B6%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/33-%E4%BA%8B%E4%BB%B6%E7%AE%80%E4%BB%8B/</guid>
      <description>本文最初发表于博客园，并在GitHub上持续更新前端的系列文章。欢迎在GitHub上关注我，一起入门和进阶前端。 以下是正文。 事件简介 事件：就</description>
    </item>
    
    <item>
      <title>34-DOM简介和DOM操作</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/34-dom%E7%AE%80%E4%BB%8B%E5%92%8Cdom%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/34-dom%E7%AE%80%E4%BB%8B%E5%92%8Cdom%E6%93%8D%E4%BD%9C/</guid>
      <description>常见概念 JavaScript的组成 JavaScript基础分为三个部分： ECMAScript：JavaScript的语法标准。包括变量、表达</description>
    </item>
    
    <item>
      <title>35-通过style对象获取和设置行内样式</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/35-%E9%80%9A%E8%BF%87style%E5%AF%B9%E8%B1%A1%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AE%E8%A1%8C%E5%86%85%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/35-%E9%80%9A%E8%BF%87style%E5%AF%B9%E8%B1%A1%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AE%E8%A1%8C%E5%86%85%E6%A0%B7%E5%BC%8F/</guid>
      <description>style属性的获取和修改 在DOM当中，如果想设置样式，有两种形式： className（针对内嵌样式） style（针对行内样式） 这篇文章，我</description>
    </item>
    
    <item>
      <title>36-offset相关属性和匀速动画(含轮播图的实现)</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/36-offset%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E5%8C%80%E9%80%9F%E5%8A%A8%E7%94%BB%E5%90%AB%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/36-offset%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E5%8C%80%E9%80%9F%E5%8A%A8%E7%94%BB%E5%90%AB%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>前言 JS动画的主要内容如下： 1、三大家族和一个事件对象： 三大家族：offset/scroll/client。也叫三大系列。 事件对象/even</description>
    </item>
    
    <item>
      <title>37-scroll相关属性和缓动动画</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/37-scroll%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/37-scroll%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/</guid>
      <description>scroll 相关属性 window.onscroll() 方法 当我们用鼠标滚轮，滚动网页的时候，会触发 window.onscroll() 方法。效果如下：（注意看控制台的打印结果） 如果你需要做滚动监听，可以使用这个方法。</description>
    </item>
    
    <item>
      <title>38-client(可视区)相关属性</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/38-client%E5%8F%AF%E8%A7%86%E5%8C%BA%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/38-client%E5%8F%AF%E8%A7%86%E5%8C%BA%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/</guid>
      <description>client 家族的组成 clientWidth 和 clientHeight 元素调用时： clientWidth：获取元素的可见宽度（width + padding）。 clientHeight：获取元素的</description>
    </item>
    
    <item>
      <title>39-事件的绑定和事件对象Event</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/39-%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1event/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/39-%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1event/</guid>
      <description>绑定事件的两种方式/DOM事件的级别 我们在之前的一篇文章《04-JavaScript/22-DOM简介和DOM操作》中已经讲过事件的概念。这</description>
    </item>
    
    <item>
      <title>40-事件的传播和事件冒泡</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/40-%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BC%A0%E6%92%AD%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/40-%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BC%A0%E6%92%AD%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</guid>
      <description>DOM事件流 事件传播的三个阶段是：事件捕获、事件冒泡和目标。 事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 ta</description>
    </item>
    
    <item>
      <title>41-事件委托</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/41-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/41-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</guid>
      <description>事件委托 事件委托，通俗地来讲，就是把一个元素响应事件（click、keydown&amp;hellip;&amp;hellip;）的函数委托到另一个元素。 比</description>
    </item>
    
    <item>
      <title>42-键盘事件</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/42-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/42-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</guid>
      <description>鼠标的拖拽事件 拖拽的流程： （1）onmousedown：当鼠标在被拖拽元素上按下时，开始拖拽； （2）onmousemove：当鼠标移动时被拖</description>
    </item>
    
    <item>
      <title>43-BOM简介和navigator.userAgent&amp;History&amp;Location</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/43-bom%E7%AE%80%E4%BB%8B%E5%92%8Cnavigator.useragenthistorylocation/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/43-bom%E7%AE%80%E4%BB%8B%E5%92%8Cnavigator.useragenthistorylocation/</guid>
      <description>常见概念 JavaScript的组成 JavaScript基础分为三个部分： ECMAScript：JavaScript的语法标准。包括变量、表达</description>
    </item>
    
    <item>
      <title>44-定时器</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/44-%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/44-%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <description>定时器的常见方法 setInterval()：循环调用。将一段代码，每隔一段时间执行一次。（循环执行） setTimeout()：延时调用。将一</description>
    </item>
    
    <item>
      <title>BOM的常见内置方法和内置对象</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/bom%E7%9A%84%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/bom%E7%9A%84%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</guid>
      <description>本文最初发表于博客园，并在GitHub上持续更新前端的系列文章。欢迎在GitHub上关注我，一起入门和进阶前端。 以下是正文。 BOM的介绍 Ja</description>
    </item>
    
    <item>
      <title>call、apply、bind的区别</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/callapplybind%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/callapplybind%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>call()和apply() 介绍 这两个方法都是函数对象的方法，需要通过函数对象来调用。 当函数调用call()和apply()时，函数都会立即</description>
    </item>
    
    <item>
      <title>DOM事件的总结</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/dom%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/dom%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
      <description>知识点主要包括以下几个方面： 基本概念：DOM事件的级别 面试不会直接问你，DOM有几个级别。但会在题目中体现：“请用DOM2 &amp;hellip;.</description>
    </item>
    
    <item>
      <title>JavaScript开发积累</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/javascript%E5%BC%80%E5%8F%91%E7%A7%AF%E7%B4%AF/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/javascript%E5%BC%80%E5%8F%91%E7%A7%AF%E7%B4%AF/</guid>
      <description>方法的注释 方法写完之后（注意，一定要先写完整），我们在方法的前面输入/**，然后回车，会发现，注释的格式会自动补齐。 比如： 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>this</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/this/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/this/</guid>
      <description>this this的作用 this可以帮我们简化很多代码。比如xiaoming.name、xiaoming.age可以直接写成this.name、th</description>
    </item>
    
  </channel>
</rss>
