<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Bablvsj&#39;s Blog</title>
    <link>https://bablvsj.github.io/</link>
    <description>Recent content on Bablvsj&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 31 Aug 2023 13:46:19 +0800</lastBuildDate><atom:link href="https://bablvsj.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL之母</title>
      <link>https://bablvsj.github.io/posts/exams/sql%E4%B9%8B%E6%AF%8D/</link>
      <pubDate>Thu, 31 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/exams/sql%E4%B9%8B%E6%AF%8D/</guid>
      <description>教程： 基础语法 数据列输出顺序 SELECT {列名...} 全表查询 select * from 表名 查询 - 别名 别名语法 {原始字段名} as {别名} 来为查询结果的列名取一个便于理解的名</description>
    </item>
    
    <item>
      <title>深浅拷贝</title>
      <link>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/20230823-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Thu, 24 Aug 2023 16:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/20230823-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>概念 浅拷贝： 1.创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。 2.如果属性是基本类型，拷贝的就是基本类型的值。 3.如果属性是引用</description>
    </item>
    
    <item>
      <title>简述原型、原型链、(原型)继承</title>
      <link>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%80%E8%BF%B0%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Wed, 23 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%80%E8%BF%B0%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF/</guid>
      <description>什么是原型 任何对象实例都有一个原型，也叫原型对象，这个原型对象由对象的内置属性_proto_指向它的构造函数的 prototype 指向的对象，即任何对象都是由</description>
    </item>
    
    <item>
      <title>JS基础</title>
      <link>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/js%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 16 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/js%E5%9F%BA%E7%A1%80/</guid>
      <description>1.判断数据类型 typeof 1 2 3 4 5 6 7 8 9 10 typeof &amp;#39;seymoe&amp;#39; // &amp;#39;string&amp;#39; typeof true // &amp;#39;boolean&amp;#39; typeof 10 // &amp;#39;number&amp;#39; typeof Symbol() // &amp;#39;symbol&amp;#39; typeof null // &amp;#39;object&amp;#39; `无法判定是否为 null ` typeof undefined // &amp;#39;undefined&amp;#39; typeof {} // &amp;#39;object&amp;#39; typeof [] // &amp;#39;object&amp;#39; typeof(() =&amp;gt; {}) // &amp;#39;function&amp;#39; 弊端： null</description>
    </item>
    
    <item>
      <title>Css库</title>
      <link>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/css/</link>
      <pubDate>Tue, 15 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/css/</guid>
      <description>1.css 选择器 CSS选择器包括行内样式、id选择器、class选择器、标签选择器，优先级依次降低，!important可用于优先级提升，比行内样式</description>
    </item>
    
    <item>
      <title>事件循环机制</title>
      <link>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 14 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/</guid>
      <description>事件循环概念 JavaScript代码的执行过程中，除了依靠函数调用栈来限制函数的执行顺序外，还要依靠任务队列(task queue)来约束其它</description>
    </item>
    
    <item>
      <title>真正理解Promise</title>
      <link>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/20230814-%E7%9C%9F%E6%AD%A3%E7%90%86%E8%A7%A3promise/</link>
      <pubDate>Mon, 14 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/20230814-%E7%9C%9F%E6%AD%A3%E7%90%86%E8%A7%A3promise/</guid>
      <description>源码实现 基础功能 1 2 3 4 5 6 7 8 9 10 const p = new Promise((resolve, reject) =&amp;gt; { resolve(&amp;#39;fulfilled&amp;#39;) reject(&amp;#39;rejected&amp;#39;) }) p.then(value=&amp;gt;{ consolo.log(value) },reason=&amp;gt;{ console.log(reason) }) new Promise 的实现原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29</description>
    </item>
    
    <item>
      <title>TypeScript</title>
      <link>https://bablvsj.github.io/posts/tech/codelanguage/20230815-typescript/</link>
      <pubDate>Fri, 11 Aug 2023 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/codelanguage/20230815-typescript/</guid>
      <description>TypeScript的特性 类型系统 TypeScript是静态类型 （根据类型检查的时机来分类） 动态类型是指在运行时才会进行类型检查，这种语言的</description>
    </item>
    
    <item>
      <title>你不知道的JavaScript-上</title>
      <link>https://bablvsj.github.io/posts/tech/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript-%E4%B8%8A/</link>
      <pubDate>Wed, 09 Aug 2023 14:55:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript-%E4%B8%8A/</guid>
      <description>作用域和闭包 第1章 作用域是什么 1.1 编译原理 传统编译语言的流程中，程序中的一段源代码在执行之前会经历三个步骤，统称为“编译”。 分词/词法分析（T</description>
    </item>
    
    <item>
      <title>C&#43;&#43;</title>
      <link>https://bablvsj.github.io/posts/exams/c&#43;&#43;/</link>
      <pubDate>Mon, 07 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/exams/c&#43;&#43;/</guid>
      <description>第一章 C++语言简介 第一节 C++语言的发展简史 1、程序语言分为三类：低级语言、中级语言、高级语言 机器语言和汇编语言属于低级语言，直接能够操纵</description>
    </item>
    
    <item>
      <title>Css题库</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/01-css-%E9%A2%98%E5%BA%93/</link>
      <pubDate>Mon, 07 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/01-css-%E9%A2%98%E5%BA%93/</guid>
      <description>1. 重绘与重排的区别 重绘：更换背景色 重排/回流：隐藏删除元素，页面dom重新渲染，重新生成布局，重新排列元素，非常影响性能。 『重绘』不一定会出</description>
    </item>
    
    <item>
      <title>for four exams</title>
      <link>https://bablvsj.github.io/posts/exams/20231028-for-four-exams/</link>
      <pubDate>Mon, 07 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/exams/20231028-for-four-exams/</guid>
      <description>am pm 28 Java程序设计 数据库原理 29 C++程序设计 英语二 Java程序设计 04747 - 2017 数据库系统原理 04735 - 2018 C++程序设计 04727 - 2019 英语二 00015 - 2012</description>
    </item>
    
    <item>
      <title>reactive与ref的区别</title>
      <link>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/20230810-reactive%E4%B8%8Eref%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 07 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/20230810-reactive%E4%B8%8Eref%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>在Vue 3中，reactive和ref是用于创建响应式数据的两种不同方式。 reactive函数用于将一个普通的JavaScript对象转换为</description>
    </item>
    
    <item>
      <title>TS面试题</title>
      <link>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/ts/</link>
      <pubDate>Mon, 07 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/ts/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Vue3 知识点</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/vue3-%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Mon, 07 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/vue3-%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>你知道Vue3.x响应式数据原理吗？ Vue3.x改用Proxy替代Object.defineProperty。 因为Proxy可以直接监听对象</description>
    </item>
    
    <item>
      <title>些许思考</title>
      <link>https://bablvsj.github.io/posts/tech/think.md/</link>
      <pubDate>Mon, 07 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/think.md/</guid>
      <description>勒布朗（LeBlanc）法则：稍后等于永不（Later equals never）</description>
    </item>
    
    <item>
      <title>面试题列表</title>
      <link>https://bablvsj.github.io/posts/interview/temp-question-list/</link>
      <pubDate>Mon, 07 Aug 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/temp-question-list/</guid>
      <description>你讲一下vue双向绑定的原理 讲一下vue3相比vue2，它在diff算法上做了哪些优化？ Vue2为什么要对数组的常用方法进行重写？ Vue的n</description>
    </item>
    
    <item>
      <title>Python 批量读取修改指定类型文件</title>
      <link>https://bablvsj.github.io/posts/tech/python/20230802-%E6%89%B9%E9%87%8F%E8%AF%BB%E5%8F%96%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 02 Aug 2023 14:55:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/python/20230802-%E6%89%B9%E9%87%8F%E8%AF%BB%E5%8F%96%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6/</guid>
      <description>完整代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import os import re import sys import glob path = &amp;#39;D:/2cr/temp/hugoBlog/content/temp&amp;#39; # 指定所需处理文件的目录 # 递归遍历文件夹 for root, dirs,</description>
    </item>
    
    <item>
      <title>Vue3 新的状态管理工具 Pinia</title>
      <link>https://bablvsj.github.io/posts/interview/vue3/20230801-vue3%E6%96%B0%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-pinia/</link>
      <pubDate>Tue, 01 Aug 2023 14:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/vue3/20230801-vue3%E6%96%B0%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-pinia/</guid>
      <description>https://juejin.cn/post/7262007830721757244#heading-4 https://juejin.cn/post/7213994684262891576#heading-11 Pinia 的优点 更贴合 Vue 3 的 Composition API 风格,学习成本更低 不需要区分 Mutation 和 Action,统一使用 Actions 操作状态 支持 TypeScript,可以充分利用 TS 的静态类</description>
    </item>
    
    <item>
      <title>Vue3 常用传参方式</title>
      <link>https://bablvsj.github.io/posts/interview/vue3/20230801-vue3-%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 01 Aug 2023 10:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/vue3/20230801-vue3-%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F/</guid>
      <description>父子组件 props 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 //父组件 &amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;ChildrenVue :msg=&amp;#39;msg&amp;#39; /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script setup &amp;gt; import ChildrenVue from &amp;#39;../components/Children.vue&amp;#39;; import { ref } from &amp;#39;vue&amp;#39; const msg = ref(&amp;#39;哈喽哈</description>
    </item>
    
    <item>
      <title>git安装/常用命令</title>
      <link>https://bablvsj.github.io/posts/blog/2023/001-gitinstall/</link>
      <pubDate>Thu, 27 Jul 2023 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/blog/2023/001-gitinstall/</guid>
      <description>一、git 下载安装与检测是否安装成功 1、git 官网官网地址，这边提醒您官网是外网下载速度极慢。 所以我推荐阿里的下载地址，版本有特别多，那就随</description>
    </item>
    
    <item>
      <title>本站创建历程</title>
      <link>https://bablvsj.github.io/posts/life/20230725-%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bablvsj.github.io/posts/life/20230725-%E5%BB%BA%E7%AB%99%E5%8E%86%E7%A8%8B/</guid>
      <description>1. 基础环境搭建 安装 git 从 github 拉取/推送代码 安装 hugo 在 v 站看到 子舒 的个人网站，十分简约美观，开始了解到 hugo。 2. Hugo 网站生成 3. GitPage 部署个人网页 4. GitActions 自动</description>
    </item>
    
    <item>
      <title>一些值得一看的电影</title>
      <link>https://bablvsj.github.io/posts/life/20221216-%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E4%B8%80%E7%9C%8B%E7%9A%84%E7%94%B5%E5%BD%B1/</link>
      <pubDate>Fri, 16 Dec 2022 14:12:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/life/20221216-%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E4%B8%80%E7%9C%8B%E7%9A%84%E7%94%B5%E5%BD%B1/</guid>
      <description>让子弹飞（申遗！） 阿甘正传（“我妈妈经常说，生活就像巧克力，你永远不知道下一颗是什么口味。”） 初恋这件小事（这就是初恋的感觉） 楚门的世界（“</description>
    </item>
    
    <item>
      <title>HelloWorld</title>
      <link>https://bablvsj.github.io/posts/life/20230725-helloworld/</link>
      <pubDate>Tue, 22 Nov 2022 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/life/20230725-helloworld/</guid>
      <description>初始模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 title: &amp;#34;模板&amp;#34; date: 2023-07-25T13:46:19+08:00 draft: true # 是否为草稿 categories: - 分类1 - 分类2 tags: - 标签1 - 标签2 showToc: true</description>
    </item>
    
    <item>
      <title>English 第一部分 常用词缀</title>
      <link>https://bablvsj.github.io/posts/exams/english-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E5%B8%B8%E7%94%A8%E8%AF%8D%E7%BC%80/</link>
      <pubDate>Sat, 29 Oct 2022 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/exams/english-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E5%B8%B8%E7%94%A8%E8%AF%8D%E7%BC%80/</guid>
      <description>anti-:表示“反”，“反对” antisocial 反社会的 auto-:表示“自己的” autobiography 自传 bi-:表示“二” bieycle自行车 bio-:表示“生物的” bi</description>
    </item>
    
    <item>
      <title>English 第二部分 重点词语及常用搭配</title>
      <link>https://bablvsj.github.io/posts/exams/english-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E9%87%8D%E7%82%B9%E8%AF%8D%E8%AF%AD%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%90%AD%E9%85%8D/</link>
      <pubDate>Fri, 28 Oct 2022 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/exams/english-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-%E9%87%8D%E7%82%B9%E8%AF%8D%E8%AF%AD%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%90%AD%E9%85%8D/</guid>
      <description>compare v.比较;对比 compared with&amp;hellip; 与&amp;hellip;&amp;hellip;相比 compared to&amp;hellip; 比作&amp;hellip;&amp;hellip; beyond compare无与伦比 mess n.肮脏:杂乱:</description>
    </item>
    
    <item>
      <title>English 第三部分 核心短语</title>
      <link>https://bablvsj.github.io/posts/exams/english-%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E6%A0%B8%E5%BF%83%E7%9F%AD%E8%AF%AD/</link>
      <pubDate>Thu, 27 Oct 2022 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/exams/english-%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86-%E6%A0%B8%E5%BF%83%E7%9F%AD%E8%AF%AD/</guid>
      <description>apply to使用;应用 The convention does not apply to us.这条惯例对我们不适用。 His project is concerned with applying the technology to practical business problems. 他的项目关系到将这项技术应用于实际的商务问题。 put forth提</description>
    </item>
    
    <item>
      <title>English 第四部分 万能句子和写作模板</title>
      <link>https://bablvsj.github.io/posts/exams/english-%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E4%B8%87%E8%83%BD%E5%8F%A5%E5%AD%90%E5%92%8C%E5%86%99%E4%BD%9C%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Wed, 26 Oct 2022 13:46:19 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/exams/english-%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86-%E4%B8%87%E8%83%BD%E5%8F%A5%E5%AD%90%E5%92%8C%E5%86%99%E4%BD%9C%E6%A8%A1%E6%9D%BF/</guid>
      <description>一、万能句子 关于&amp;hellip;&amp;hellip;人们有不同的观点。一些人认为&amp;hellip;&amp;hellip; There are different opinions among people as to ______.Some people suggest that ______. 俗话说</description>
    </item>
    
    <item>
      <title>初识HTML</title>
      <link>https://bablvsj.github.io/posts/tech/wait/01-html/03-%E5%88%9D%E8%AF%86html/</link>
      <pubDate>Tue, 01 Feb 2022 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/01-html/03-%E5%88%9D%E8%AF%86html/</guid>
      <description>HTML的概述 HTML的概念 HTML 全称为 HyperText Markup Language，译为超文本标记语言。 HTML 不是一种编程语言，是一种描述性的标记语言。 作用：HTML是负</description>
    </item>
    
    <item>
      <title>2021年中</title>
      <link>https://bablvsj.github.io/posts/thinks/20210701-half/</link>
      <pubDate>Thu, 01 Jul 2021 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/thinks/20210701-half/</guid>
      <description>1、TypeScript + Vue 泛型，interface和type有什么区别 交叉类型(&amp;amp;)与联合类型(|) 、可索引类型（数组） 类型申明文</description>
    </item>
    
    <item>
      <title>一些闲书</title>
      <link>https://bablvsj.github.io/posts/thinks/20210501-book/</link>
      <pubDate>Sat, 01 May 2021 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/thinks/20210501-book/</guid>
      <description>1、《百年孤独》 无论走到哪里，都应该记住，过去都是假的，回忆是一条没有尽头的路，一切以往的春天都不复存在，就连那最坚韧而又狂乱的爱情归根结底</description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/javascript/</link>
      <pubDate>Fri, 01 May 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/javascript/</guid>
      <description>JavaScript JavaScript的组成 JavaScript 由以下三部分组成： ECMAScript（核心）：JavaScript 语言基础 DOM（文档对象模型）：规定了访问</description>
    </item>
    
    <item>
      <title>手写代码</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/202308-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 01 May 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/202308-%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/</guid>
      <description>手写事件侦听器，并要求兼容浏览器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54</description>
    </item>
    
    <item>
      <title>egg.js</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/egg.js/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/egg.js/</guid>
      <description>egg-sequelize 连接多个数据库如何配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 config.sequelize = { datasources: [ { delegate: &amp;#39;model&amp;#39;, // 加载所有的模型到 app.model and ctx.model baseDir:</description>
    </item>
    
    <item>
      <title>HTTP协议</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/04-http%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/04-http%E5%8D%8F%E8%AE%AE/</guid>
      <description>前言 一面要讲的内容： HTTP协议的主要特点 HTTP报文的组成部分 HTTP方法 get 和 post的区别 HTTP状态码 什么是持久连接 什么是管线化 二面要</description>
    </item>
    
    <item>
      <title>js运行机制：异步和单线程</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/09-js%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E5%BC%82%E6%AD%A5%E5%92%8C%E5%8D%95%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/09-js%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E5%BC%82%E6%AD%A5%E5%92%8C%E5%8D%95%E7%BA%BF%E7%A8%8B/</guid>
      <description>JS的异步和单线程 题目一：异步 现有如下代码： 1 2 3 4 5 6 7 console.log(1); setTimeout(function () { console.log(2); }, 1000); console.log(3); console.log(4); // 我们很容易知道，打印的顺序是`1，3，4，2` 可如果我把延时的</description>
    </item>
    
    <item>
      <title>z-推荐文章</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/z-%E6%8E%A8%E8%8D%90%E6%96%87%E7%AB%A0/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/z-%E6%8E%A8%E8%8D%90%E6%96%87%E7%AB%A0/</guid>
      <description>征服JavaScript面试系列 | 众城翻译 征服 JavaScript 面试：什么是闭包？ 征服 JavaScript 面试：什么是函数组合 征服JavaScript面试系列：类继承和原型继</description>
    </item>
    
    <item>
      <title>安全问题：CSRF和XSS</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/07-%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98csrf%E5%92%8Cxss/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/07-%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98csrf%E5%92%8Cxss/</guid>
      <description>CSRF 基本概念、缩写、全称 CSRF（Cross-site request forgery）：跨站请求伪造。 PS：中文名一定要记住 CSRF的攻击原理 用户是网站A的</description>
    </item>
    
    <item>
      <title>算法问题</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/08-%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/08-%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/</guid>
      <description>排序 上面的排序这么多，我们要记住下面这三个： 快速排序：https://segmentfault.com/a/1190000009426421</description>
    </item>
    
    <item>
      <title>跨域通信类</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/06-%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1%E7%B1%BB/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/06-%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1%E7%B1%BB/</guid>
      <description>同源策略的概念和具体限制 同源策略：限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制</description>
    </item>
    
    <item>
      <title>钉钉面试</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%92%89%E9%92%89%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%92%89%E9%92%89%E9%9D%A2%E8%AF%95/</guid>
      <description>基础知识主要包含以下几个方面： 基础：计算机原理、编译原理、数据结构、算法、设计模式、编程范式等基本知识了解 语法：JavaScript、ECM</description>
    </item>
    
    <item>
      <title>面向对象：类的定义和继承的几种方式</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/05-02.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/05-02.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>前言 类与实例： 类的声明 生成实例 类与继承： 如何实现继承：继承的本质就是原型链 继承的几种方式 类的定义、实例化 类的定义/类的声明 方式一：用构造函数</description>
    </item>
    
    <item>
      <title>面经链接推荐</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%9D%A2%E7%BB%8F%E9%93%BE%E6%8E%A5%E6%8E%A8%E8%8D%90/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%9D%A2%E7%BB%8F%E9%93%BE%E6%8E%A5%E6%8E%A8%E8%8D%90/</guid>
      <description>有时在面试时，我都替候选人着急——候选人完全可以在面试前准备 转眼人到中年：前端老程序员无法忘怀的一次百度电话面试 八年前的面经，咋记得这么清楚</description>
    </item>
    
    <item>
      <title>面试技巧</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7/</guid>
      <description>写简历的注意事项 最多可以写“深入了解”，但不要写“精通”。 遇到不知道的问题，该怎么回答 这块儿我没了解过，准备回去看一下。 这块儿我没研究过，您</description>
    </item>
    
    <item>
      <title>面试题库</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/1.%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/1.%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/</guid>
      <description>1、http 和 https 的基本概念 http: 是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的超文本传输协议。 http</description>
    </item>
    
    <item>
      <title>面试题整理</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 01 Apr 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</guid>
      <description>JavaScript 存储相关：请描述以下cookie、localStorage、sessionStorage的区别 在H5之前，cookie一直都是本地存储的一</description>
    </item>
    
    <item>
      <title>css---sass、less、scss</title>
      <link>https://bablvsj.github.io/posts/interview/css/css---sasslessscss/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/css/css---sasslessscss/</guid>
      <description>sass sass变量 $variablename: value; 示例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $myFont: Helvetica, sans-serif; $myColor: red; $myFontSize: 18px; $myWidth: 680px; body { font-family: $myFont; font-size: $myFontSize; color: $myColor; } #container { width: $myWidth; } sass作用域 Sass 变量的作用域只能在当前的</description>
    </item>
    
    <item>
      <title>lazyload&amp;防抖动和节流阀</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/lazyload%E9%98%B2%E6%8A%96%E5%8A%A8%E5%92%8C%E8%8A%82%E6%B5%81%E9%98%80/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/lazyload%E9%98%B2%E6%8A%96%E5%8A%A8%E5%92%8C%E8%8A%82%E6%B5%81%E9%98%80/</guid>
      <description>lazyload 用的最多的场景是： 图片lazyload 组件lazyload 现在一般都单独做css的lazyload或者js的lazyload，因为这种方式</description>
    </item>
    
    <item>
      <title>前端性能优化认知</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/00-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%AE%A4%E7%9F%A5/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/00-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%AE%A4%E7%9F%A5/</guid>
      <description>前端性能优化认知 什么是前端性能优化 通常来讲，前端性能优化是指：从用户开始访问网站到整个页面完整地展现出来的过程中，通过各种优化策略和优化方法</description>
    </item>
    
    <item>
      <title>前端性能分析工具和指标</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/01-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8C%87%E6%A0%87/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/01-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8C%87%E6%A0%87/</guid>
      <description>性能指标和优化目标之：加载 性能指标：我们在性能优化过程中可以参考的标准。这些标准都是业界或者前人总结出来的指导性经验。我们可以参考这些指标，</description>
    </item>
    
    <item>
      <title>浏览器渲染机制</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/</guid>
      <description>前言 渲染机制包括的内容： 什么是DOCTYPE及作用 浏览器渲染过程。面试经常会问：在浏览器中输入url，发生了哪些事情。其中有一部就是浏览器的</description>
    </item>
    
    <item>
      <title>渲染优化</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03-%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03-%E6%B8%B2%E6%9F%93%E4%BC%98%E5%8C%96/</guid>
      <description>浏览器的渲染机制 我们需要先理解浏览器的渲染经历了哪些过程，才能有针对性的进行相关优化。 掌握浏览器的渲染优化，可以说是前端工程师的一个分水岭。</description>
    </item>
    
    <item>
      <title>静态资源优化</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BC%98%E5%8C%96/</guid>
      <description>图片格式和应用场景 JPEG 格式 JPEG（Joint Photographic Experts Group）是一种针对彩色照片而广泛使用的有损压缩图形格式，属于位图。 常用文件扩展名为.jp</description>
    </item>
    
    <item>
      <title>页面渲染性能优化</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 01 Mar 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>浏览器渲染过程 浏览器解析 HTML，生成 DOM Tree（Parse HTML）。 浏览器解析 CSS，生成 CSSOM（CSS Object Model）Tree。 JavaScript 会</description>
    </item>
    
    <item>
      <title>Common.js 与 ES6 Module</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/common.js-%E4%B8%8E-es6-module/</link>
      <pubDate>Sat, 01 Feb 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/common.js-%E4%B8%8E-es6-module/</guid>
      <description>ES6 模块与 CommonJS 模块有什么异同？ ES6 Module 和 CommonJS 模块的区别： CommonJS 是对模块的浅拷⻉，ES6 Module 是对模块的引⽤，即 ES6 Module 只存只读，不能改变其值，也就是指针指向不能变</description>
    </item>
    
    <item>
      <title>js 执行机制 宏任务微任务</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/js-%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6-%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Sat, 01 Feb 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/js-%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6-%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1/</guid>
      <description>js执行机制 说出结果并说出why 这道题考察的是，js的任务执行流程，对宏任务和微任务的理解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description>
    </item>
    
    <item>
      <title>this指向、apply、call、bind</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/4-this%E6%8C%87%E5%90%91applycallbind/</link>
      <pubDate>Sat, 01 Feb 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/4-this%E6%8C%87%E5%90%91applycallbind/</guid>
      <description>1. this指向问题 1.1 this永远指向最后调用它的那个对象 1 2 3 4 5 6 7 8 9 10 严格模式下 var name = &amp;#34;windowsName&amp;#34;; function a() { var name = &amp;#34;Cherry&amp;#34;; console.log(this.name); // windowsName console.log(&amp;#34;inner:&amp;#34; + this); // inner: Window } a(); //类似于</description>
    </item>
    
    <item>
      <title>前端跨域Nginx、CORS</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/2-%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9Fnginxcors/</link>
      <pubDate>Sat, 01 Feb 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/2-%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9Fnginxcors/</guid>
      <description>什么是跨域？ 跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。 广义的跨域： 1 2 3 1.) 资源跳转： A链接、重定向、表单提交</description>
    </item>
    
    <item>
      <title>原型、原型链</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
      <pubDate>Sat, 01 Feb 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 任何一个对象都有 _proto_ 属性 ,#这个属性会指向该对象的原型 构造函数 _proto_ 属性下 有contructor 属性 per.__proto__.constructor === per.constructor per.constructor.__proto__ __pr</description>
    </item>
    
    <item>
      <title>同源和跨域</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/04-%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Sat, 01 Feb 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/04-%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F/</guid>
      <description>同源和跨域 同源 同源策略是浏览器的一种安全策略，所谓同源是指，域名，协议，端口完全相同。 跨域问题的解决方案 从我自己的网站访问别人网站的内容，就</description>
    </item>
    
    <item>
      <title>浏览器兼容适配</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/1-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%80%82%E9%85%8D/</link>
      <pubDate>Sat, 01 Feb 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/1-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%80%82%E9%85%8D/</guid>
      <description>解决方案： 1、媒体查询 百度分辨率统计 ：https://tongji.baidu.com/research/site?source=index</description>
    </item>
    
    <item>
      <title>赋值、深拷贝、浅拷贝</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/3-%E8%B5%8B%E5%80%BC%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Sat, 01 Feb 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/01-%E5%89%8D%E7%AB%AF%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/3-%E8%B5%8B%E5%80%BC%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>浅拷贝（复制数据内存地址，赋值会改变原数据） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var p = { &amp;#34;id&amp;#34;:&amp;#34;007&amp;#34;, &amp;#34;name&amp;#34;:&amp;#34;刘德华&amp;#34</description>
    </item>
    
    <item>
      <title>00-Vue的介绍和vue-cli</title>
      <link>https://bablvsj.github.io/posts/tech/wait/11-vue%E5%9F%BA%E7%A1%80/00-vue%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8Cvue-cli/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/11-vue%E5%9F%BA%E7%A1%80/00-vue%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8Cvue-cli/</guid>
      <description>MVVM模式 Model：负责数据存储 View：负责页面展示 View Model：负责业务逻辑处理（比如Ajax请求等），对数据进行加工后交给视图展示</description>
    </item>
    
    <item>
      <title>01-06.自定义按键修饰符&amp;自定义指令</title>
      <link>https://bablvsj.github.io/posts/tech/wait/11-vue%E5%9F%BA%E7%A1%80/01-06.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/11-vue%E5%9F%BA%E7%A1%80/01-06.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</guid>
      <description>v-on的按键修饰符 Vue 内置的按键修饰符 通俗一点讲，指的是：监听键盘输入的事件。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符。如下： Vue内置</description>
    </item>
    
    <item>
      <title>01-2020年Web前端最新导航</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%86%85%E5%AE%B9%E5%88%86%E4%BA%AB/01-2020%E5%B9%B4web%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%AF%BC%E8%88%AA/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%86%85%E5%AE%B9%E5%88%86%E4%BA%AB/01-2020%E5%B9%B4web%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%AF%BC%E8%88%AA/</guid>
      <description>GitHub 排名统计 GitHub 中文排行榜、高分优秀中文项目：https://github.com/kon9chunkit/GitHub-Chinese-Top</description>
    </item>
    
    <item>
      <title>01-Node.js介绍</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/01-node.js%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/01-node.js%E4%BB%8B%E7%BB%8D/</guid>
      <description>todo rpc 和 Node.js 的关系 《吊打面试官》系列 Node.js 全栈秒杀系统 前言 Node 的重要性已经不言而喻，很多互联网公司都已经有大量的高性能系统运行在 Node 之上。Node 凭借其</description>
    </item>
    
    <item>
      <title>01-React介绍</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/01-react%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/01-react%E4%BB%8B%E7%BB%8D/</guid>
      <description>虚拟DOM和diff算法 在学习 React 之前，我们需要先了解两个概念：虚拟DOM、diff算法。 虚拟DOM 问题描述： 假设我们的数据发生一点点的变化，</description>
    </item>
    
    <item>
      <title>01-WebStorm的使用</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-webstorm%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-webstorm%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>WebStorm的简单设置 1、主题修改： 可能大家会觉得软件的界面不太好看，我们可以换一下主题。选择菜单栏“File&amp;ndash;settin</description>
    </item>
    
    <item>
      <title>01-数据库的基础知识</title>
      <link>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/01-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/01-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>数据库的概念 数据库：database（DB），是一种存储数据的仓库。具有如下特性： 数据库是根据数据结构组织、存储和管理数据。 数据库能够长期、</description>
    </item>
    
    <item>
      <title>02-ES5中的严格模式</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/02-es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/02-es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</guid>
      <description>ES的几个重要版本 ES5 : 09年发布。 ES6(ES2015) : 2015年发布，也称为ECMA2015。 ES7(ES2016) : 2016年发布，也称为ECMA2016 (变化不大)。 严格模</description>
    </item>
    
    <item>
      <title>02-GitHub项目推荐</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%86%85%E5%AE%B9%E5%88%86%E4%BA%AB/02-github%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%86%85%E5%AE%B9%E5%88%86%E4%BA%AB/02-github%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90/</guid>
      <description>CSS CSS Inspiration，在这里找到写 CSS 的灵感：https://github.com/chokcoco/CSS-Inspiration CSS 常</description>
    </item>
    
    <item>
      <title>02-JSX语法介绍</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/02-jsx%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/02-jsx%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>JSX介绍 JSX的引入 如果直接让用户通过 JS 代码手动创建DOM元素，肯定是非常麻烦的。 于是，React 官方就提出了一套 JSX 语法规范，能够让我们在</description>
    </item>
    
    <item>
      <title>02-MySQL的安装和Navicat软件使用</title>
      <link>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/02-mysql%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8Cnavicat%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/02-mysql%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8Cnavicat%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/</guid>
      <description>MySQL 安装 MySQL（Mac版） 步骤1、下载安装包并安装： MySQL 下载地址：https://dev.mysql.com/downloads/mysql</description>
    </item>
    
    <item>
      <title>02-Node.js的特点</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/02-node.js%E7%9A%84%E7%89%B9%E7%82%B9/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/02-node.js%E7%9A%84%E7%89%B9%E7%82%B9/</guid>
      <description>Node.js 的特点 异步、非阻塞 IO 模型 事件循环 单线程 总结：轻量和高效 Node.js 的性能和效率非常高。 传统的 Java 语言是一个请求开启一个线程，当请求处理完毕后就关闭这个</description>
    </item>
    
    <item>
      <title>02-数据的赋值</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/02-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%B5%8B%E5%80%BC/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/02-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%B5%8B%E5%80%BC/</guid>
      <description>对象赋值 用 Object.assgin() 实现浅拷贝 代码举例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const obj1 = { name: &amp;#39;qianguyihao&amp;#39;, age: 28, desc: &amp;#39;hello world&amp;#39;, }; const obj2 = { name: &amp;#39;许嵩&amp;#39;, sex: &amp;#39;男&amp;#</description>
    </item>
    
    <item>
      <title>03-ES5中的一些扩展</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/03-es5%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/03-es5%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95/</guid>
      <description>JSON 对象 1、js对象(数组) &amp;ndash;&amp;gt; json对象(数组)： 1 JSON.stringify(obj/arr) 2、json对象(数组) &amp;ndash;&amp;gt; js对象(数组)： 1 JSON.parse(json) 上面这两个方法是ES5中提供的。 我们要</description>
    </item>
    
    <item>
      <title>03-Git的使用</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/03-git%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/03-git%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>常见操作 全局配置用户信息 1 2 git config --global user.name &amp;#34;lvsijun&amp;#34; git config --global user.email &amp;#34;lvsijun@163.com&amp;#34; 分支的合并 场景：基于master分支的代码，开发一个新的特性，给每个特性都单独建一个的新的分</description>
    </item>
    
    <item>
      <title>03-MySQL的基本操作</title>
      <link>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/03-mysql%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/03-mysql%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>SQL 的一些简单语法规则 结束符 SQL 指令需要语句结束符，默认是英文分号;。 当然，还有另外两个结束符： \g 与英文分号;等效。 \G：将查到的结构旋转90度</description>
    </item>
    
    <item>
      <title>03-Node.js开发环境安装</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/03-node.js%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/03-node.js%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</guid>
      <description>Node.js 运行环境配置：通过 Node.js 安装包（不推荐） 去 Node.js 的官网下载安装包： 我们也可以在https://nodejs.org/en/download/rel</description>
    </item>
    
    <item>
      <title>03-React组件（一）：生命周期</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/03-react%E7%BB%84%E4%BB%B6%E4%B8%80%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/03-react%E7%BB%84%E4%BB%B6%E4%B8%80%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>组件的生命周期 在组件创建、到加载到页面上运行、以及组件被销毁的过程中，总是伴随着各种各样的事件，这些在组件特定时期，触发的事件统称为组件的生</description>
    </item>
    
    <item>
      <title>03-变量的数据类型：基本数据类型和引用数据类型</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/03-%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/03-%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>变量的数据类型 为什么需要数据类型 在计算机中，不同的数据所需占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型。而且，不同的数</description>
    </item>
    
    <item>
      <title>04-ES6：变量 let、const 和块级作用域</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/04-es6%E5%8F%98%E9%87%8F-letconst-%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/04-es6%E5%8F%98%E9%87%8F-letconst-%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>ES6 的变量声明 ES5 中，使用 var 定义全局变量（ var 是 variable 的简写）。 ES6 中，新增了 let 和 const 来定义变量： let：定义局部变量，替代 var。 const：定义常量（</description>
    </item>
    
    <item>
      <title>04-MySQL字段的数据类型</title>
      <link>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/04-mysql%E5%AD%97%E6%AE%B5%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/04-mysql%E5%AD%97%E6%AE%B5%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>前言 MySQL 中的字段，主要有四种数据类型： 整型（整数） 小数 字符串类型 时间日期类型 下面来详细讲一讲。 整数类型 整数类型的分类 MySQL中，整型有五种：</description>
    </item>
    
    <item>
      <title>04-Node.js模块化规范：CommonJS</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/04-node.js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83commonjs/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/04-node.js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83commonjs/</guid>
      <description>前言 网站越来越复杂，js代码、js文件也越来越多，会遇到一些问题： 文件依赖 全局污染、命名冲突 程序模块化包括： 日期模块 数学计算模块 日志模块 登陆</description>
    </item>
    
    <item>
      <title>04-React组件（二）：常见属性和函数</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/04-react%E7%BB%84%E4%BB%B6%E4%BA%8C%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7%E5%92%8C%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/04-react%E7%BB%84%E4%BB%B6%E4%BA%8C%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7%E5%92%8C%E5%87%BD%E6%95%B0/</guid>
      <description>defaultProps 和 prop-types 使用 defaultProps 设置组件的默认值 React 中，使用静态的 defaultProps 属性，来设置组件的默认属性值。 格式举例： 1 2 3 4 // 在 React 中，使用静态的 defaultProps 属性，来设置组件的默认属</description>
    </item>
    
    <item>
      <title>05-Node.js内置模块：fs文件模块</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/05-node.js%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97fs%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/05-node.js%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97fs%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97/</guid>
      <description>Node.js 的官方API文档 Node.js 的API文档（英文）： https://nodejs.org/docs/latest-v8.x/api/index.html Node.js 的API文档（中文）：http://nodejs.cn/api/ 关于 Node.js 的内置模块和常见API，</description>
    </item>
    
    <item>
      <title>05-React中绑定this并给函数传参的几种方式</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/05-react%E4%B8%AD%E7%BB%91%E5%AE%9Athis%E5%B9%B6%E7%BB%99%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/05-react%E4%B8%AD%E7%BB%91%E5%AE%9Athis%E5%B9%B6%E7%BB%99%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>前言 我们先来看下面这段代码： components/MyComponent.jsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import React from &amp;#34;react&amp;#34;; export default class MyComponent extends React.Component { constructor(props) { super(props); this.state = { msg: &amp;#34;这是 MyComponent</description>
    </item>
    
    <item>
      <title>06-ES6：箭头函数</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/06-es6%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/06-es6%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>箭头函数 定义箭头函数的语法 语法： 1 (参数1, 参数2 ...) =&amp;gt; { 函数体 } 解释： 如果有且仅有 1 个形参，则()可以省略 如果函数体内有且仅有 1 条语句，则{</description>
    </item>
    
    <item>
      <title>06-Node.js内置模块：path路径模块</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/06-node.js%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97path%E8%B7%AF%E5%BE%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/06-node.js%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97path%E8%B7%AF%E5%BE%84%E6%A8%A1%E5%9D%97/</guid>
      <description>path 路径模块 Node.js 通过path这个内置模块，提供了一些路径操作的API，具体可以参考官方的api文档。这里列举一些常用的API。 path.extname() 获取文件/路径的</description>
    </item>
    
    <item>
      <title>06-React的单向数据绑定</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/06-react%E7%9A%84%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/06-react%E7%9A%84%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</guid>
      <description>单项数据绑定 在 Vue 中，可以通过 v-model 指令来实现双向数据绑定。但是，在 React 中并没有指令的概念，而且 React 默认不支持 双向数据绑定。 React 只支持，把数据从 state 上传输</description>
    </item>
    
    <item>
      <title>07-Node.js操作MySQL数据库</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/07-node.js%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/07-node.js%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>Node.js 连接 MySQL （1）安装 mysql 包： 1 $ npm install mysql （2）引入 mysql 包： 1 const mysql = require(&amp;#34;mysql&amp;#34;); （3）建立连接： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 let mysql = require(&amp;#34;mysql&amp;#34;); let options = { host: &amp;#34;localhost&amp;#34;, //port:&amp;#34;3306&amp;#34;,</description>
    </item>
    
    <item>
      <title>07-React路由的使用</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/07-react%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/07-react%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>React路由的使用 使用React路由之前，我们需要先安装 react-router-dom这个包。比如： 1 yarn add react-router-dom 代码举例： （1）index.</description>
    </item>
    
    <item>
      <title>07-typeof和数据类型转换</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/07-typeof%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/07-typeof%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>前言 变量的数据类型转换：将一种数据类型转换为另外一种数据类型。 通常有三种形式的类型转换： 转换为字符串类型 转换为数字型 转换为布尔型 你会专门把某</description>
    </item>
    
    <item>
      <title>07-剩余参数和扩展运算符</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/07-%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/07-%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%E5%92%8C%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>剩余参数 剩余参数允许我们将不确定数量的剩余的元素放到一个数组中。 比如说，当函数的实参个数大于形参个数时，我们可以将剩余的实参放到一个数组中。</description>
    </item>
    
    <item>
      <title>08-Ant Design的基本使用</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/08-ant-design%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/08-ant-design%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>andt 的介绍 Ant Design 是基于 React 实现，开发和服务于企业级后台产品。 支持环境 现代浏览器和 IE9 及以上（需要 polyfills）。 支持服务端渲染。 Electron Electr</description>
    </item>
    
    <item>
      <title>08-Vuex</title>
      <link>https://bablvsj.github.io/posts/tech/wait/11-vue%E5%9F%BA%E7%A1%80/08-vuex/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/11-vue%E5%9F%BA%E7%A1%80/08-vuex/</guid>
      <description>state / mutations / getters / actions =&amp;gt; 公共数据库 / 直接改变数据方法 / state的计算属性 / 异步( 调用mutations方法 )间接改变数据 1、store.js文件 1</description>
    </item>
    
    <item>
      <title>08-字符串、数组、对象的扩展</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/08-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/08-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>字符串的扩展 下面提到的字符串的几个方法，更详细的内容，可以看《04-JavaScript 基础/内置对象 String：字符串的常见方法.md》</description>
    </item>
    
    <item>
      <title>08-运算符</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/08-%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/08-%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>我们在本文件夹的第 02 篇里讲到了JS中变量的概念，本篇文章讲一下运算符和表达式。 运算符的定义和分类 运算符的定义 运算符：也叫操作符，是一种符号。</description>
    </item>
    
    <item>
      <title>09-AntD框架的upload组件上传图片时遇到的一些坑</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/09-antd%E6%A1%86%E6%9E%B6%E7%9A%84upload%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/09-antd%E6%A1%86%E6%9E%B6%E7%9A%84upload%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</guid>
      <description>前言 本次做后台管理系统，采用的是 AntD 框架。涉及到图片的上传，用的是AntD的 upload 组件。 前端做文件上传这个功能，是很有技术难度的。既然框架给我们提</description>
    </item>
    
    <item>
      <title>09-内置对象扩展：Set数据结构</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/09-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/09-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E6%89%A9%E5%B1%95set%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>Set 数据结构 Set 数据结构的介绍 ES6 提供了 新的数据结构 Set。Set 类似于数组，但成员的值都是唯一的，没有重复的值。 Set 的应用有很多。比如，在 H5 页面的</description>
    </item>
    
    <item>
      <title>09-流程控制语句：选择结构（if和switch）</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/09-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84if%E5%92%8Cswitch/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/09-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84if%E5%92%8Cswitch/</guid>
      <description>代码块 用{}包围起来的代码，就是代码块。 在 ES5 语法中，代码块，只具有分组的作用，没有其他的用途。代码块中的内容，在外部是完全可见的。举例： 1 2</description>
    </item>
    
    <item>
      <title>10-AntD框架的upload组件上传图片时使用customRequest方法自定义上传行为</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/10-antd%E6%A1%86%E6%9E%B6%E7%9A%84upload%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%B6%E4%BD%BF%E7%94%A8customrequest%E6%96%B9%E6%B3%95%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8A%E4%BC%A0%E8%A1%8C%E4%B8%BA/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/10-antd%E6%A1%86%E6%9E%B6%E7%9A%84upload%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%B6%E4%BD%BF%E7%94%A8customrequest%E6%96%B9%E6%B3%95%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8A%E4%BC%A0%E8%A1%8C%E4%B8%BA/</guid>
      <description>本次做后台管理系统，采用的是 AntD 框架。涉及到图片的上传，用的是AntD的 upload 组件。 我在上一篇文章《前端AntD框架的upload组件上传图片时遇</description>
    </item>
    
    <item>
      <title>10-Promise入门详解</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/10-promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/10-promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>前言：异步和回调 异步 JavaScript 的执行环境是单线程。 所谓单线程，是指 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，也就是一次只能完成一项任务，这个任务执</description>
    </item>
    
    <item>
      <title>10-React Navive初识</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/10-react-navive%E5%88%9D%E8%AF%86/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/10-react-navive%E5%88%9D%E8%AF%86/</guid>
      <description>搭建开发环境 官方文档：https://reactnative.cn/docs/getting-started.html 安装Node、home</description>
    </item>
    
    <item>
      <title>10-流程控制语句：循环结构（for和while）</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/10-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84for%E5%92%8Cwhile/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/10-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84for%E5%92%8Cwhile/</guid>
      <description>前言 循环语句：通过循环语句可以反复的执行一段代码多次。 for 循环 for 循环的语法 语法： 1 2 3 for(①初始化表达式; ②条件表达式; ④更新表达式){ ③</description>
    </item>
    
    <item>
      <title>11-Promise的常见用法和API</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/11-promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E5%92%8Capi/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/11-promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E5%92%8Capi/</guid>
      <description>链式调用：基于 Promise 处理多次 Ajax 请求【重要】 实际开发中，我们经常需要同时请求多个接口。比如说：在请求完接口1的数据data1之后，需要根据data</description>
    </item>
    
    <item>
      <title>11-对象简介</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/11-%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/11-%E5%AF%B9%E8%B1%A1%E7%AE%80%E4%BB%8B/</guid>
      <description>对象简介 面向对象简介 面向对象：可以创建自定义的类型，很好的支持继承和多态。 面向对象的特征：封装、继承、多态。 对象的概念 在 JavaScript 中，对象是一组无序</description>
    </item>
    
    <item>
      <title>12-ES7：async函数详解</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/12-es7async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/12-es7async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid>
      <description>备注： async/await 的内容还有待完善。 async/await （异步函数）概述 async/await 是在 ES7 中引入的新语法，可以更加方便地进行异步操作。 本质： Generator 的语法糖。 async 的返回值是 Promise 实例对象。 await</description>
    </item>
    
    <item>
      <title>12-基本包装类型</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/12-%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/12-%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/</guid>
      <description>基本数据类型不能绑定属性和方法 属性和方法只能添加给对象，不能添加给基本数据类型。 1、基本数据类型： 注意，基本数据类型string是无法绑定属</description>
    </item>
    
    <item>
      <title>13-内置对象 String：字符串的常见方法</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/13-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1-string%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/13-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1-string%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</guid>
      <description>内置对象简介 JavaScript 中的对象分为3种：自定义对象 、内置对象、 浏览器对象。 前面两种对象：是JS的基础内容，属于 ECMAScript； 第三个浏览器对象</description>
    </item>
    
    <item>
      <title>14-内置对象：Number和Math</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/14-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1number%E5%92%8Cmath/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/14-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1number%E5%92%8Cmath/</guid>
      <description>内置对象 Number 的常见方法 Number.isInteger() 判断是否为整数 语法： 1 布尔值 = Number.isInteger(数字); toFixed() 小数点后面保留多少位 语法： 1 字符串 = myNum.toFixed(num); 解释：</description>
    </item>
    
    <item>
      <title>15-内置对象：Date</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/15-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1date/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/15-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1date/</guid>
      <description>内置对象：Date Date 对象在实际开发中，使用得很频繁，且容易在细节地方出错，需要引起重视。 内置对象 Date 用来处理日期和时间。 需要注意的是：与 Math 对象</description>
    </item>
    
    <item>
      <title>16-数组简介</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/16-%E6%95%B0%E7%BB%84%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/16-%E6%95%B0%E7%BB%84%E7%AE%80%E4%BB%8B/</guid>
      <description>之前学习的数据类型，只能存储一个值（字符串也为一个值）。如果我们想存储多个值，就可以使用数组。 数组简介 数组（Array）是属于内置对象，我们</description>
    </item>
    
    <item>
      <title>17-数组的常见方法</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/17-%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/17-%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/</guid>
      <description>数组的方法清单 数组的类型相关 方法 描述 备注 Array.isArray() 判断是否为数组 toString() 将数组转换为字符串 Array.from(arrayLike) 将伪数组转化为真数组 Array.of(value1, value2, value3) 创建数组：将一系列值转换成数组 注意，</description>
    </item>
    
    <item>
      <title>18-函数</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/18-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/18-%E5%87%BD%E6%95%B0/</guid>
      <description>前言 关于函数的核心内容： 函数有哪几种定义和调用方式 this：函数内部的 this 指向、如何改变 this 的指向。 函数的严格模式 高阶函数：函数作为参数传递、函</description>
    </item>
    
    <item>
      <title>19-作用域和变量提升</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/19-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/19-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</guid>
      <description>作用域、变量提升的知识点，面试时会经常遇到。 作用域（Scope）的概念 概念：通俗来讲，作用域是一个变量或函数的作用范围。作用域在函数定义时，</description>
    </item>
    
    <item>
      <title>20-预编译</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/20-%E9%A2%84%E7%BC%96%E8%AF%91/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/20-%E9%A2%84%E7%BC%96%E8%AF%91/</guid>
      <description>我们在上一篇文章《作用域》中简单讲过“变量提升”，今天来讲一下预编译，这对我们深入理解变量提升会有帮助。 JavaScript 运行三部曲 语法分析 预编译 解释执行 预</description>
    </item>
    
    <item>
      <title>21-this指向</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/21-this%E6%8C%87%E5%90%91/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/21-this%E6%8C%87%E5%90%91/</guid>
      <description>执行期上下文 当函数执行时（准确来说，是在函数发生预编译的前一刻），会创建一个执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环</description>
    </item>
    
    <item>
      <title>22-call、apply 和 bind</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/22-callapply-%E5%92%8C-bind/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/22-callapply-%E5%92%8C-bind/</guid>
      <description>前言 JS 专门为我们提供了一些方法来改变函数内部的 this 指向。常见的方法有 call()、apply()、bind() 方法。 call() 方法 call() 方法的作用 call() 方法的</description>
    </item>
    
    <item>
      <title>23-高阶函数</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/23-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/23-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
      <description>高阶函数 高阶函数的概念 当 函数 A 接收函数 B 作为参数，或者把函数 C 作为返回值输出时，我们称 函数 A 为高阶函数。 通俗来说，高阶函数是 对其他函数进行操</description>
    </item>
    
    <item>
      <title>24-闭包</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/24-%E9%97%AD%E5%8C%85/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/24-%E9%97%AD%E5%8C%85/</guid>
      <description>闭包的引入 我们知道，变量根据作用域的不同分为两种：全局变量和局部变量。 函数内部可以访问全局变量和局部变量。 函数外部只能访问全局变量，不能访问</description>
    </item>
    
    <item>
      <title>25-面向对象概述</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/25-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/25-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0/</guid>
      <description>面向过程和面向对象 面向过程 面向过程：先分析好的具体步骤，然后按照步骤，一步步解决问题。 优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例</description>
    </item>
    
    <item>
      <title>26-对象的创建&amp;构造函数</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/26-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/26-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</guid>
      <description>在看本文之前，可以先复习前面的一篇文章：《04-JavaScript 基础/11-对象简介.md》 创建自定义对象的几种方法 方式一：对象字面量 对</description>
    </item>
    
    <item>
      <title>27-对象的基本操作</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/27-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/27-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>对象的基本操作 创建对象 使用 new 关键字调用的函数，是构造函数 constructor。构造函数是专门用来创建对象的函数。 例如： 1 var obj = new Object(); 记住，使</description>
    </item>
    
    <item>
      <title>28-浅拷贝和深拷贝</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/28-%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/28-%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/</guid>
      <description>概念 浅拷贝：只拷贝最外面一层的数据；更深层次的对象，只拷贝引用。 深拷贝：拷贝多层数据；每一层级别的数据都会拷贝。 总结： 拷贝引用的时候，是属于</description>
    </item>
    
    <item>
      <title>29-对象的高级操作（待更新）</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/29-%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C%E5%BE%85%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/29-%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C%E5%BE%85%E6%9B%B4%E6%96%B0/</guid>
      <description>Object.freeze() 冻结对象 Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对</description>
    </item>
    
    <item>
      <title>30-原型链和原型继承（待更新）</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/30-%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%BE%85%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/30-%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%BE%85%E6%9B%B4%E6%96%B0/</guid>
      <description>前言 在 ES6 中，我们可以通过 ES6 引入的类 Class 来实现面向对象的编程（下一篇文章会讲到）。但是在 ES6 之前，我们是通过构造函数和原型，来模拟类的实现机制。 今</description>
    </item>
    
    <item>
      <title>31-类和构造继承（待更新）</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/31-%E7%B1%BB%E5%92%8C%E6%9E%84%E9%80%A0%E7%BB%A7%E6%89%BF%E5%BE%85%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/31-%E7%B1%BB%E5%92%8C%E6%9E%84%E9%80%A0%E7%BB%A7%E6%89%BF%E5%BE%85%E6%9B%B4%E6%96%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>32-正则表达式</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/32-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/32-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>正则表达式简介 定义：正则表达式用于定义一些字符串的规则。 作用：计算机可以根据正则表达式，来检查一个字符串是否符合指定的规则；或者将字符串中符</description>
    </item>
    
    <item>
      <title>33-事件简介</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/33-%E4%BA%8B%E4%BB%B6%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/33-%E4%BA%8B%E4%BB%B6%E7%AE%80%E4%BB%8B/</guid>
      <description>本文最初发表于博客园，并在GitHub上持续更新前端的系列文章。欢迎在GitHub上关注我，一起入门和进阶前端。 以下是正文。 事件简介 事件：就</description>
    </item>
    
    <item>
      <title>34-DOM简介和DOM操作</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/34-dom%E7%AE%80%E4%BB%8B%E5%92%8Cdom%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/34-dom%E7%AE%80%E4%BB%8B%E5%92%8Cdom%E6%93%8D%E4%BD%9C/</guid>
      <description>常见概念 JavaScript的组成 JavaScript基础分为三个部分： ECMAScript：JavaScript的语法标准。包括变量、表达</description>
    </item>
    
    <item>
      <title>35-通过style对象获取和设置行内样式</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/35-%E9%80%9A%E8%BF%87style%E5%AF%B9%E8%B1%A1%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AE%E8%A1%8C%E5%86%85%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/35-%E9%80%9A%E8%BF%87style%E5%AF%B9%E8%B1%A1%E8%8E%B7%E5%8F%96%E5%92%8C%E8%AE%BE%E7%BD%AE%E8%A1%8C%E5%86%85%E6%A0%B7%E5%BC%8F/</guid>
      <description>style属性的获取和修改 在DOM当中，如果想设置样式，有两种形式： className（针对内嵌样式） style（针对行内样式） 这篇文章，我</description>
    </item>
    
    <item>
      <title>36-offset相关属性和匀速动画(含轮播图的实现)</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/36-offset%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E5%8C%80%E9%80%9F%E5%8A%A8%E7%94%BB%E5%90%AB%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/36-offset%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E5%8C%80%E9%80%9F%E5%8A%A8%E7%94%BB%E5%90%AB%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>前言 JS动画的主要内容如下： 1、三大家族和一个事件对象： 三大家族：offset/scroll/client。也叫三大系列。 事件对象/even</description>
    </item>
    
    <item>
      <title>37-scroll相关属性和缓动动画</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/37-scroll%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/37-scroll%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7%E5%92%8C%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/</guid>
      <description>scroll 相关属性 window.onscroll() 方法 当我们用鼠标滚轮，滚动网页的时候，会触发 window.onscroll() 方法。效果如下：（注意看控制台的打印结果） 如果你需要做滚动监听，可以使用这个方法。</description>
    </item>
    
    <item>
      <title>38-client(可视区)相关属性</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/38-client%E5%8F%AF%E8%A7%86%E5%8C%BA%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/38-client%E5%8F%AF%E8%A7%86%E5%8C%BA%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/</guid>
      <description>client 家族的组成 clientWidth 和 clientHeight 元素调用时： clientWidth：获取元素的可见宽度（width + padding）。 clientHeight：获取元素的</description>
    </item>
    
    <item>
      <title>39-事件的绑定和事件对象Event</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/39-%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1event/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/39-%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1event/</guid>
      <description>绑定事件的两种方式/DOM事件的级别 我们在之前的一篇文章《04-JavaScript/22-DOM简介和DOM操作》中已经讲过事件的概念。这</description>
    </item>
    
    <item>
      <title>40-事件的传播和事件冒泡</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/40-%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BC%A0%E6%92%AD%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/40-%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BC%A0%E6%92%AD%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</guid>
      <description>DOM事件流 事件传播的三个阶段是：事件捕获、事件冒泡和目标。 事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 ta</description>
    </item>
    
    <item>
      <title>41-事件委托</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/41-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/41-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</guid>
      <description>事件委托 事件委托，通俗地来讲，就是把一个元素响应事件（click、keydown&amp;hellip;&amp;hellip;）的函数委托到另一个元素。 比</description>
    </item>
    
    <item>
      <title>42-键盘事件</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/42-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/42-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</guid>
      <description>鼠标的拖拽事件 拖拽的流程： （1）onmousedown：当鼠标在被拖拽元素上按下时，开始拖拽； （2）onmousemove：当鼠标移动时被拖</description>
    </item>
    
    <item>
      <title>43-BOM简介和navigator.userAgent&amp;History&amp;Location</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/43-bom%E7%AE%80%E4%BB%8B%E5%92%8Cnavigator.useragenthistorylocation/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/43-bom%E7%AE%80%E4%BB%8B%E5%92%8Cnavigator.useragenthistorylocation/</guid>
      <description>常见概念 JavaScript的组成 JavaScript基础分为三个部分： ECMAScript：JavaScript的语法标准。包括变量、表达</description>
    </item>
    
    <item>
      <title>44-定时器</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/44-%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/44-%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <description>定时器的常见方法 setInterval()：循环调用。将一段代码，每隔一段时间执行一次。（循环执行） setTimeout()：延时调用。将一</description>
    </item>
    
    <item>
      <title>BOM的常见内置方法和内置对象</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/bom%E7%9A%84%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/bom%E7%9A%84%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E5%92%8C%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</guid>
      <description>本文最初发表于博客园，并在GitHub上持续更新前端的系列文章。欢迎在GitHub上关注我，一起入门和进阶前端。 以下是正文。 BOM的介绍 Ja</description>
    </item>
    
    <item>
      <title>call、apply、bind的区别</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/callapplybind%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/callapplybind%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>call()和apply() 介绍 这两个方法都是函数对象的方法，需要通过函数对象来调用。 当函数调用call()和apply()时，函数都会立即</description>
    </item>
    
    <item>
      <title>chrome浏览器</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/06-chrome%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/06-chrome%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
      <description>title: &amp;ldquo;HelloWorld&amp;rdquo; date: 2022-11-22T17:11:35+08:00 draft: true 控制台的使用 控制台查看源码 控制台的Sources标签可以查看源码。按住快捷键「cmd + P」，可以根据文件名查找源码文件。 其他 show user</description>
    </item>
    
    <item>
      <title>CommonJS</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/commonjs/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/commonjs/</guid>
      <description>全局对象 global 类似于客户端 JavaScript 运行环境中的 window。 process 用于获取当前的 Node 进程信息，一般用于获取环境变量之类的信息。 console Node 中内置的 console 模块，提供操作控</description>
    </item>
    
    <item>
      <title>CSS</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/css/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/css/</guid>
      <description>CSS display: none; 与 visibility: hidden; 的区别 联系：它们都能让元素不可见 区别： display:none;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；visib</description>
    </item>
    
    <item>
      <title>CSS盒模型及BFC</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/css%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8Abfc/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/css%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8Abfc/</guid>
      <description>题目：谈一谈你对CSS盒模型的认识 专业的面试，一定会问 CSS 盒模型。对于这个题目，我们要回答一下几个方面： 基本概念：content、paddin</description>
    </item>
    
    <item>
      <title>CSS选择器</title>
      <link>https://bablvsj.github.io/posts/tech/wait/01-html/03-css%E9%80%89%E6%8B%A9%E5%99%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/01-html/03-css%E9%80%89%E6%8B%A9%E5%99%A8/</guid>
      <description>CSS 概述 CSS：Cascading Style Sheet，层叠样式表。CSS 的作用就是给 HTML 页面标签添加各种样式，定义网页的显示效果。简单一句话：CSS 将</description>
    </item>
    
    <item>
      <title>data-structure</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/data-structure/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/data-structure/</guid>
      <description>栈和队列的区别? 栈的插入和删除操作都是在一端进行的，而队列的操作却是在两端进行的。 队列先进先出，栈先进后出。 栈只允许在表尾一端进行插入和删除</description>
    </item>
    
    <item>
      <title>DOM事件的总结</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/dom%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/dom%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
      <description>知识点主要包括以下几个方面： 基本概念：DOM事件的级别 面试不会直接问你，DOM有几个级别。但会在题目中体现：“请用DOM2 &amp;hellip;.</description>
    </item>
    
    <item>
      <title>ES6</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/es6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/es6/</guid>
      <description>前言 ECMAScript 是 JS 的语言标准。而 ES6 是新的 JS 语法标准。 发展历史 20180303_1633.png 2015年6月，ES6正式发布。 ES6 的其他优势 使用 babel 语法转换器，支持低端浏览器 流行的库基</description>
    </item>
    
    <item>
      <title>ES6</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230801-es6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230801-es6/</guid>
      <description>1、ES5、ES6和ES2015有什么区别? ES2015特指在2015年发布的新一代JS语言标准，ES6泛指下一代JS语言标准，包含ES20</description>
    </item>
    
    <item>
      <title>ES6：Symbol</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/es6symbol/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/es6symbol/</guid>
      <description>Symbol 概述 背景：ES5中对象的属性名都是字符串，容易造成重名，污染环境。 概念：ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它</description>
    </item>
    
    <item>
      <title>GitHub的使用</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/05-github%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/05-github%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>GitHub的使用 GitHub添加wiki 参考链接： https://juejin.im/post/5a3216c8f265da43333e6b54 GitHub项目添加 license 参考链接： https://blog.csdn.net/qq_35246620/article/details/77647234 GitHub 引用图片的另一种方式 参考链接： 关于markdown</description>
    </item>
    
    <item>
      <title>HTML</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230801-html/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230801-html/</guid>
      <description>HTML 语义化 HTML标签的语义化是指：通过使用包含语义的标签（如h1-h6）恰当地表示文档结构 css命名的语义化是指：为html标签添加有意义的</description>
    </item>
    
    <item>
      <title>HTTP协议</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/http%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/http%E5%8D%8F%E8%AE%AE/</guid>
      <description>一面中，如果有笔试，考HTTP协议的可能性较大。 1. 前言 一面要讲的内容： HTTP协议的主要特点 HTTP报文的组成部分 HTTP方法 get 和 post的</description>
    </item>
    
    <item>
      <title>JavaScript开发积累</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/javascript%E5%BC%80%E5%8F%91%E7%A7%AF%E7%B4%AF/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/javascript%E5%BC%80%E5%8F%91%E7%A7%AF%E7%B4%AF/</guid>
      <description>方法的注释 方法写完之后（注意，一定要先写完整），我们在方法的前面输入/**，然后回车，会发现，注释的格式会自动补齐。 比如： 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>JavaScript模块化：AMD</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96amd/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96amd/</guid>
      <description>AMD的基本语法 AMD的概念 AMD（Asynchronous Module Definition）：异步模块定义。AMD专门用于浏览器端，模块的加载是异步</description>
    </item>
    
    <item>
      <title>JavaScript模块化：CMD</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96cmd/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96cmd/</guid>
      <description>CMD的基本语法 CMD的概念 CMD（Common Module Definition）：同步模块定义。CMD专门用于浏览器端，模块的加载是同步的。模块在使</description>
    </item>
    
    <item>
      <title>JavaScript模块化：ES6</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96es6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/javascript%E6%A8%A1%E5%9D%97%E5%8C%96es6/</guid>
      <description>模块化开发的引入 JS开发的弊端 JS 在使用时存在两大问题，而 Node.js 可以很好地避免这两个问题： 文件依赖。比如 a 文件依赖 b 文件，b 文件依赖 c 文件。而 Node.js 中</description>
    </item>
    
    <item>
      <title>Less详解</title>
      <link>https://bablvsj.github.io/posts/interview/css/03-less%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/interview/css/03-less%E8%AF%A6%E8%A7%A3/</guid>
      <description>本文最初发表于博客园，并在GitHub上持续更新前端的系列文章。欢迎在GitHub上关注我，一起入门和进阶前端。 以下是正文。 CSS 预处理器 为什么</description>
    </item>
    
    <item>
      <title>localStorage</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/localstorage/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/localstorage/</guid>
      <description>浏览器本地存储 在较高版本的浏览器中，js提供了sessionStorage和globalStorage。在HTML5中提供了localSto</description>
    </item>
    
    <item>
      <title>MySQL数据库的常用命令</title>
      <link>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>MySQL 的一些简单命令 我们可以在 Navicat Premium 软件中，创建数据库和表，然后输入查询命令来查询数据。选择菜单栏「查询-&amp;gt;新建查询-&amp;gt;输入 sql 命令-&amp;</description>
    </item>
    
    <item>
      <title>MySQL设计三大范式</title>
      <link>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/mysql%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/</guid>
      <description>前言 范式即规范。MySQL 范式的作用是： 让我们建的表更佳简洁和高效。 让功能独立化，避免耦合。 MySQL 设计三大范式 第一范式（1NF）：原子性 表的每一</description>
    </item>
    
    <item>
      <title>Node.js代码举例</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/node.js%E4%BB%A3%E7%A0%81%E4%B8%BE%E4%BE%8B/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/node.js%E4%BB%A3%E7%A0%81%E4%B8%BE%E4%BE%8B/</guid>
      <description>在 Node.js 上建一个 http 服务器 （1）新建一个文件 server01.js，然后在里面输入如下代码： 1 2 3 4 5 6 7 8 9 10 const http = require(&amp;#39;http&amp;#39;); //引入 node.js里面</description>
    </item>
    
    <item>
      <title>react</title>
      <link>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/react/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/12-react%E5%9F%BA%E7%A1%80/react/</guid>
      <description>1、姓名组件 hello lvsijun ! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //组件名称必须以大写字母开头。React 会将以小写字母开头的组件视为原生 DOM 标签 //例如</description>
    </item>
    
    <item>
      <title>SEO</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/seo/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/seo/</guid>
      <description>前端需要注意哪些SEO 合理的title、description、keywords：搜索对着三项的权重逐个减小，title值强调重点即可，重要</description>
    </item>
    
    <item>
      <title>this</title>
      <link>https://bablvsj.github.io/posts/tech/wait/04-javascript/this/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/04-javascript/this/</guid>
      <description>this this的作用 this可以帮我们简化很多代码。比如xiaoming.name、xiaoming.age可以直接写成this.name、th</description>
    </item>
    
    <item>
      <title>VS Code的使用</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-vs-code%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/01-vs-code%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>快捷键 作用 IDEA 快捷键 VS Code 备注 复制当前行 Ctrl + D Shift + Alt + ↑↓ 使用很频繁 当前文件搜索 Ctrl + R Ctrl + F 非常实用 全局搜索内容 Ctrl + Shift + R Ctrl + Shift + F 不如上面的快</description>
    </item>
    
    <item>
      <title>VS Code的使用积累</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/05-vs-code%E7%9A%84%E4%BD%BF%E7%94%A8%E7%A7%AF%E7%B4%AF/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/05-vs-code%E7%9A%84%E4%BD%BF%E7%94%A8%E7%A7%AF%E7%B4%AF/</guid>
      <description>常见配置 自动保存： 1 &amp;#34;files.autoSave&amp;#34;: &amp;#34;onFocusChange&amp;#34; 参考链接：https://blog.csdn.net/WestLonly/article/details/78048</description>
    </item>
    
    <item>
      <title>vue</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/vue/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/vue/</guid>
      <description>什么是mvvm？ MVVM是Model-View-ViewModel的缩写。mvvm是一种设计思想。Model 层代表数据模型，也可以在Mode</description>
    </item>
    
    <item>
      <title>WebSocket</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/websocket/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/websocket/</guid>
      <description>WebSocket 的引入 背景分析 HTTP协议是无状态的，服务器只会响应来自客户端的请求，但是它与客户端之间不具备持续连接。 当用户在浏览器上进行操作时，可以请</description>
    </item>
    
    <item>
      <title>web安全</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230802-web%E5%AE%89%E5%85%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230802-web%E5%AE%89%E5%85%A8/</guid>
      <description>常见web安全及防护原理 sql注入原理 就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的</description>
    </item>
    
    <item>
      <title>事件驱动和非阻塞机制</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%9C%BA%E5%88%B6/</guid>
      <description>异步编程 异步操作 Node 采用 Chrome V8 引擎处理 JavaScript 脚本。V8 最大特点就是单线程运行，一次只能运行一个任务。 Node 大量采用异步操作（asynchronous op</description>
    </item>
    
    <item>
      <title>创建对象和原型链</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/12%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/12%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
      <description>1 前言 1.1 面向对象的三大特性 封装 继承 多态 1.2 原型链的知识 原型链是面向对象的基础，是非常重要的部分。有以下几种知识： 创建对象有几种方法 原型、构造函</description>
    </item>
    
    <item>
      <title>如何解决跨域问题</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230801-%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230801-%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</guid>
      <description>如何解决跨域问题 JSONP： 原理是：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url</description>
    </item>
    
    <item>
      <title>安全问题：CSRF和XSS</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/11%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98csrf%E5%92%8Cxss/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/11%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98csrf%E5%92%8Cxss/</guid>
      <description>1 前言 面试中的安全问题，明确来说，就两个方面： CSRF：基本概念、攻击方式、防御措施 XSS：基本概念、攻击方式、防御措施 这两个问题，一般不会</description>
    </item>
    
    <item>
      <title>性能优化</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230801-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230801-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>一、网络相关 1.1 DNS 预解析 DNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP 1 &amp;lt;link rel=&amp;#34;dns-prefetch&amp;#34; href=&amp;#34;//yuchengkai.cn&amp;#34;&amp;gt; 1.2 缓存 缓存对于前端性能优化来说是个很重要的点</description>
    </item>
    
    <item>
      <title>推荐文章</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%86%85%E5%AE%B9%E5%88%86%E4%BA%AB/2019-%E6%8E%A8%E8%8D%90%E6%96%87%E7%AB%A0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%86%85%E5%AE%B9%E5%88%86%E4%BA%AB/2019-%E6%8E%A8%E8%8D%90%E6%96%87%E7%AB%A0/</guid>
      <description>阿里9年，我总结的前端架构演进3大阶段及团队管理心法 伟明的推荐，说是对前端开发的价值观形成有良好的影响。 前端开发面试题 在逛公众号「前端大全」</description>
    </item>
    
    <item>
      <title>模块化</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230801-%E6%A8%A1%E5%9D%97%E5%8C%96/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/20230801-%E6%A8%A1%E5%9D%97%E5%8C%96/</guid>
      <description>说说你对AMD和Commonjs的理解 CommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步</description>
    </item>
    
    <item>
      <title>浏览器</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
      <description>二、跨域 因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败 2.1 JSONP JSONP 的原理很简单，就是利</description>
    </item>
    
    <item>
      <title>浏览器</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E7%AC%94%E8%AE%B0/</guid>
      <description>硅谷甄选 技术栈包含: vue3+TypeScript+vue-router+pinia+element-plus+axios+echarts 等技术栈。 一、vue3 组件通信方式 通信仓库地址: https://gitee.com/jch1011/vue3_communication.git 不管是 vue2 还是 vue3,组件通信方式很重要,不管是项目还是面试都是经常</description>
    </item>
    
    <item>
      <title>网络抓包和代理工具：Whistle</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%92%8C%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7whistle/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/00-%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%92%8C%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7whistle/</guid>
      <description>Whistle 官网 Whistle 官网：https://wproxy.org/whistle/ Whistle 的 GitHub：https://github.com/avwo/whi</description>
    </item>
    
    <item>
      <title>面试题精简版本</title>
      <link>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B2%BE%E7%AE%80%E7%89%88%E6%9C%AC/</link>
      <pubDate>Wed, 01 Jan 2020 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/14-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B2%BE%E7%AE%80%E7%89%88%E6%9C%AC/</guid>
      <description>一、CSS相关 1.1 左边定宽，右边自适应方案：float + margin，float + calc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /* 方案1 */ .left { width: 120px; float: left; }</description>
    </item>
    
    <item>
      <title>01-前端代码规范</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/15-%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/01-%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sun, 01 Dec 2019 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/15-%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/01-%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description>前端代码规范-推荐资料 JS规范，重点推荐下面这两个 1、Airbnb JavaScript Style Guide： 英文原版：https://github.com/airbn</description>
    </item>
    
    <item>
      <title>前端监控技术</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/15-%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sun, 01 Dec 2019 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/15-%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/</guid>
      <description>前言 要监控的内容： 业务数据 稳定性 性能 错误 用户操作路径 怎么监控： PV/UV、业务操作上报 根据上报寻找异常 将页面性能数据上报 将页面产生错误上报 跟</description>
    </item>
    
    <item>
      <title>egg.js</title>
      <link>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/egg.js-1/</link>
      <pubDate>Fri, 01 Nov 2019 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/10-node.js%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/egg.js-1/</guid>
      <description>egg-sequelize 连接多个数据库如何配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 config.sequelize = { datasources: [ { delegate: &amp;#39;model&amp;#39;, // 加载所有的模型到 app.model and ctx.model baseDir:</description>
    </item>
    
    <item>
      <title>云服务器Mind</title>
      <link>https://bablvsj.github.io/posts/tech/linux/%E4%B8%AA%E4%BA%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 01 Nov 2019 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/linux/%E4%B8%AA%E4%BA%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>腾讯云服务器控制台： https://iaas.cloud.tencent.com/webshell?regionId=4&amp;amp;instanceId=ins-56hta1uv&amp;amp;username=root&amp;amp;port=22 ****LL612lv. Nginx 查看80端口被占用的进程 1 lsof -i:80 通过kill命令干掉该进程 1 kill -9 进程号(pid) 重启Nginx 1 nginx -s reload 服务器 安全组配</description>
    </item>
    
    <item>
      <title>前端人应知的 CentosNginxNode 的基本操作</title>
      <link>https://bablvsj.github.io/posts/tech/linux/%E5%89%8D%E7%AB%AF%E4%BA%BA%E5%BA%94%E7%9F%A5%E7%9A%84-centosnginxnode-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 01 Nov 2019 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/linux/%E5%89%8D%E7%AB%AF%E4%BA%BA%E5%BA%94%E7%9F%A5%E7%9A%84-centosnginxnode-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>前端人应该知道的 Centos/Nginx/Node的基本操作 Centos Centos 是一个基于 Linux 的开源免费操作系统，下面列出一些常用操作 1 2 # 本地拷贝文件到远程</description>
    </item>
    
    <item>
      <title>内容分享</title>
      <link>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%86%85%E5%AE%B9%E5%88%86%E4%BA%AB/20230806-%E5%86%85%E5%AE%B9%E5%88%86%E4%BA%AB/</link>
      <pubDate>Tue, 01 Jan 2019 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/zzz-%E5%86%85%E5%AE%B9%E5%88%86%E4%BA%AB/20230806-%E5%86%85%E5%AE%B9%E5%88%86%E4%BA%AB/</guid>
      <description>资源分享 新手学习Node.js 推荐狼叔的《如何正确学习Node.js》，地址：https://github.com/i5ting/How-t</description>
    </item>
    
    <item>
      <title>模糊查询关键字高亮</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E5%85%B3%E9%94%AE%E5%AD%97%E9%AB%98%E4%BA%AE/</link>
      <pubDate>Tue, 01 Jan 2019 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E5%85%B3%E9%94%AE%E5%AD%97%E9%AB%98%E4%BA%AE/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 &amp;lt;template&amp;gt; &amp;lt;view&amp;gt; &amp;lt;view class=&amp;#34;search&amp;#34;&amp;gt; &amp;lt;image class=&amp;#34;search-icon&amp;#34; src=&amp;#34;../../../static/zfdygl-search@2x.png&amp;#34; mode=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/image&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=</description>
    </item>
    
    <item>
      <title>网页设计和开发中，关于字体的常识</title>
      <link>https://bablvsj.github.io/posts/tech/wait/01-html/03-%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%BC%80%E5%8F%91%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%AD%97%E4%BD%93%E7%9A%84%E5%B8%B8%E8%AF%86/</link>
      <pubDate>Tue, 01 Jan 2019 17:11:35 +0800</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/wait/01-html/03-%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%BC%80%E5%8F%91%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%AD%97%E4%BD%93%E7%9A%84%E5%B8%B8%E8%AF%86/</guid>
      <description>字体分类 常见的字体可以分为两类：衬线体、无衬线体。 1、serif（衬线体）：在字的笔画开始、结束的地方有额外的装饰，而且笔画的粗细会有所不同</description>
    </item>
    
    <item>
      <title>Linux 新手必备命令</title>
      <link>https://bablvsj.github.io/posts/tech/linux/20230809-linux-%E6%96%B0%E6%89%8B%E5%BF%85%E5%A4%87%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/linux/20230809-linux-%E6%96%B0%E6%89%8B%E5%BF%85%E5%A4%87%E5%91%BD%E4%BB%A4/</guid>
      <description>命令总结 命令参数的长格式与短格式示例 长格式 短格式 man &amp;ndash;help man -h 一、常用系统工作命令 1．echo - 输出值 echo 命令用于在终端输出字符串或变量提取后的值，</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://bablvsj.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bablvsj.github.io/about/</guid>
      <description>about</description>
    </item>
    
    <item>
      <title>我的第一本算法书</title>
      <link>https://bablvsj.github.io/posts/tech/frontend/15-%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/20230809-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bablvsj.github.io/posts/tech/frontend/15-%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/20230809-%E7%AE%97%E6%B3%95/</guid>
      <description>一、数据结构 数据结构 优点 缺点 运行时间 添加/删除 链表 数据的添加/删除都较为方便 访问数据比较耗费时间 O(n) O(1) 数组 访问数据十分简单 添加/删除数据比较耗</description>
    </item>
    
    
    
    <item>
      <title>留言</title>
      <link>https://bablvsj.github.io/message/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bablvsj.github.io/message/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
