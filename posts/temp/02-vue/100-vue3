### 一、新建vue3项目

- 脚手架 [Vite](https://github.com/vitejs/vite)：

  ```bash
  npm init vite-app hello-vue3 # OR yarn create vite-app hello-vue3
  ```

- 脚手架 [vue-cli](https://cli.vuejs.org/)：

  ```bash
  npm install -g @vue/cli # OR yarn global add @vue/cli
  vue create hello-vue3
  # select vue 3 preset
  ```



安装事项：

1、选择哪个模板进行安装，我们选择自定义安装的方法

<img src="https://cdn.jsdelivr.net/gh/Frontend-Lsj/photoStore//img/image-20210714170551361.png" alt="image-20210714170551361" style="zoom:150%;" />

2、上下鼠标键移动到选择项，根据自己的需要按`空格`进行选择

![image-20210714170916727](C:\Users\hydsoft-5\AppData\Roaming\Typora\typora-user-images\image-20210714170916727.png)

```javascript
(*) Choose          //Vue version 选择Vue版本
(*) Babel			//JavaScript 的编译器
(*)TypeScript		//TypeScript语法
( )Progressive Web App (PWA) Support  //先进的Web应用程序(PWA)支持
( )Router     		//路由
( )Vuex 			//状态管理
( )CSS Pre-processors //CSS预处理程序
( )Linter / Formatter //格式化程序
( )Unit Testing 	//单元测试
( )E2E Testing 		//E2E测试
```

3、选择你想要的vue版本，选择vue3.x的项目版本。
![image-20210714171248138](https://cdn.jsdelivr.net/gh/Frontend-Lsj/photoStore//img/image-20210714171248138.png)

4、自由选择项

```javascript
Use class-style component syntax? No   //是否使用类样式的组件语法
Use Babel alongside TypeScript (required for modern mode, auto-detected polyfills, transpiling JSX)? No	  	//是否选择使用我们TypeScript和Babel编译我们的jsx
Use history mode for router? (Requires proper server setup for index fallback in production) Yes  //是否路由使用history模式
Pick a linter / formatter config: Prettier  //选择代码规范，一般来说我们选择的是ESLint + Prettier来统一前端代码风格 ,ESLint with error prevention only不加规范
Pick additional lint features: Lint on save   //保存时进行代码设置
Where do you prefer placing config for Babel, ESLint, etc.? In package.json  //设置好的配置单独写一个文件,或者写入我们的package.json文件
Save this as a preset for future projects? No  //否保存我们刚才的设置，方便下一次创建使用
```

<img src="https://cdn.jsdelivr.net/gh/Frontend-Lsj/photoStore//img/image-20210714171800921.png" alt="image-20210714171800921"  />

5、如果同时安装了yarn和npm，它会询问下载构建方式，这个看个人选择。
(1).yarn安装依赖不会存在丢包问题，npm偶尔丢包；
(2).yarn在安装依赖的时候会进行缓存，而npm则不会。例如在安装依赖的时候因网络原因或者误操作将IDE工具关闭等等，在下一次安装的时候，yarn会从之前已经下载好的地方继续下载，而npm和cnpm则会将之前的删除重新下载。
![img](https://img2020.cnblogs.com/blog/2165569/202011/2165569-20201105161232839-312259899.png)
下载创建完成以后，我们接下来将命令移动到刚刚创建的项目中 cd myproject，然后使用yarn serve就可以运行我们创建好的项目了。



![image-20210714170405440](https://cdn.jsdelivr.net/gh/Frontend-Lsj/photoStore//img/image-20210714170405440.png)

