<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Lvsj&#39;s blog</title>
        <link>https://bablvsj.github.io/posts/</link>
        <description>所有文章 | Lvsj&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 01 Jan 2023 17:11:35 &#43;0800</lastBuildDate><atom:link href="https://bablvsj.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>2022年终总结</title>
    <link>https://bablvsj.github.io/archives/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html/</link>
    <pubDate>Sun, 01 Jan 2023 17:11:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bablvsj.github.io/archives/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html/</guid>
    <description><![CDATA[我的2022 1、项目开发 1-7月 润酒店数字中心 8-12月 智能风控平台 智能营销平台/财务中台 2、书籍《穷爸爸富爸爸》《期货大作手风云录：初入期]]></description>
</item>
<item>
    <title>一些值得一看的电影</title>
    <link>https://bablvsj.github.io/archives/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E4%B8%80%E7%9C%8B%E7%9A%84%E7%94%B5%E5%BD%B1.html/</link>
    <pubDate>Fri, 16 Dec 2022 14:12:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bablvsj.github.io/archives/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E4%B8%80%E7%9C%8B%E7%9A%84%E7%94%B5%E5%BD%B1.html/</guid>
    <description><![CDATA[阿甘正传（“我妈妈经常说，生活就像巧克力，你永远不知道下一颗是什么口味。”） 宝莲灯（动画，个人认为已经逼近迪士尼水准了） 暴力街区 Banlieue 13 （跑酷鼻]]></description>
</item>
<item>
    <title>async函数详解</title>
    <link>https://bablvsj.github.io/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/</link>
    <pubDate>Tue, 22 Nov 2022 17:11:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bablvsj.github.io/archives/async%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3.html/</guid>
    <description><![CDATA[备注： async/await 的内容还有待完善。 async/await （异步函数）概述 async/await 是在 ES7 中引入的新语法，可以更加方便地进行异步操作。 本质： Generator 的语法糖。 async 的返回值是 Promise 实例对象。 await]]></description>
</item>
<item>
    <title>ES5的一些扩展</title>
    <link>https://bablvsj.github.io/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/</link>
    <pubDate>Tue, 22 Nov 2022 17:11:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bablvsj.github.io/archives/es5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95.html/</guid>
    <description><![CDATA[JSON 对象 1、js对象(数组) &ndash;&gt; json对象(数组)： JSON.stringify(obj/arr) 2、json对象(数组) &ndash;&gt; js对象(数组)： JSON.parse(json) 上面这两个方法是ES5中提供的。 我们要记住]]></description>
</item>
<item>
    <title>ES5中的严格模式</title>
    <link>https://bablvsj.github.io/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/</link>
    <pubDate>Tue, 22 Nov 2022 17:11:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bablvsj.github.io/archives/es5%E4%B8%AD%E7%9A%84%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F.html/</guid>
    <description><![CDATA[ES 的几个重要版本 ES5 : 09 年发布。 ES6(ES2015) : 2015 年发布，也称为 ECMA2015。 ES7(ES2016) : 2016 年发布，也称为 ECMA2016 (变化不大)。 严格模式的理解 概念 理解：除了正常运行]]></description>
</item>
<item>
    <title>Es6的介绍和环境配置</title>
    <link>https://bablvsj.github.io/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/</link>
    <pubDate>Tue, 22 Nov 2022 17:11:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bablvsj.github.io/archives/es6%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html/</guid>
    <description><![CDATA[前言 ECMAScript 简介 ES 的全称是 ECMAScript，它是由 ECMA 国际标准化组织 制定的一套脚本语言的标准化规范。 详细来说，ES 是由 ECMA 的第 39 号技术专家委员会（]]></description>
</item>
<item>
    <title>let、const和块级作用域</title>
    <link>https://bablvsj.github.io/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/</link>
    <pubDate>Tue, 22 Nov 2022 17:11:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bablvsj.github.io/archives/letconst%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html/</guid>
    <description><![CDATA[ES6 的变量声明 ES5 中，使用 var 定义全局变量（ var 是 variable 的简写）。 ES6 中，新增了 let 和 const 来定义变量： let：定义局部变量，替代 var。 const：定义常量（]]></description>
</item>
<item>
    <title>Promise的常见用法</title>
    <link>https://bablvsj.github.io/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/</link>
    <pubDate>Tue, 22 Nov 2022 17:11:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bablvsj.github.io/archives/promise%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95.html/</guid>
    <description><![CDATA[链式调用：基于 Promise 处理多次 Ajax 请求【重要】 实际开发中，我们经常需要同时请求多个接口。比如说：在请求完接口1的数据data1之后，需要根据data]]></description>
</item>
<item>
    <title>Promise入门详解</title>
    <link>https://bablvsj.github.io/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/</link>
    <pubDate>Tue, 22 Nov 2022 17:11:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bablvsj.github.io/archives/promise%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3.html/</guid>
    <description><![CDATA[前言：异步和回调 异步 JavaScript 的执行环境是单线程。 所谓单线程，是指 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，也就是一次只能完成一项任务，这个任务执]]></description>
</item>
<item>
    <title>Symbol</title>
    <link>https://bablvsj.github.io/archives/symbol.html/</link>
    <pubDate>Tue, 22 Nov 2022 17:11:35 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bablvsj.github.io/archives/symbol.html/</guid>
    <description><![CDATA[Symbol 概述 背景：ES5中对象的属性名都是字符串，容易造成重名，污染环境。 概念：ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它]]></description>
</item>
</channel>
</rss>
